func validate_jwt(token) {
  if not is_jwt_valid(token) {
    return "Invalid JWT token"
  }
  return ""
}

parameter auth_config.crashoverride.token {
  shortdoc:  "Crash Override API token"
  doc:       "Get your API token at Crash Override: https://crashoverride.run"
  default:   ""
  validator: func validate_jwt(string) -> string
}

auth_config crashoverride {
  ~auth:  "jwt"
}

func get_crashoverride_reporting_jwt() {
  headers := auth_headers("crashoverride")
  if contains(headers, "authorization") {
    response := url_post("https://chalk.crashoverride.run/v0.1/key-provider/jwt", "", headers)
    json     := parse_json(response)
    token    := get(json, "jwt")
    return token
  }
  return ""
}

auth_config crashoverride_reporting {
  ~auth:  "jwt"
  ~token: memoize("crashoverride_jwt", func get_crashoverride_reporting_jwt() -> string)
}

sink_config crashoverride {
  ~enabled:         true
  ~sink:            "presign"
  ~priority:        999999
  ~uri:             "https://chalk.crashoverride.run/v0.1/report"
  ~auth:            "crashoverride_reporting"
}

custom_report crashoverride {
  ~enabled:         true
  ~report_template: "crashoverride"
  ~sink_configs:    ["crashoverride"]
  ~use_when:        ["insert", "build", "push", "exec"]
}

attestation.key_provider             = "get"
docker.wrap_entrypoint               = true
run_sbom_tools                       = true
run_sast_tools                       = true
~exec.command_name_from_args         = true
~env_always_show                     = [
  "AWS_ROLE_ARN",
  "KUBERNETES_PORT_443_TCP_ADDR",
  "KUBERNETES_SERVICE_HOST",
  "K_REVISION",
  "K_SERVICE",
  "PATH",
  "PWD",
  "SSH_TTY",
  "USER",
  "XDG_SESSION_TYPE"
]

info("Crash Override integration is enabled and chalk reports will be sent to https://crashoverride.run")
