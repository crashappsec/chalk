##
## Copyright (c) 2023, Crash Override, Inc.
##
## This file is part of Chalk
## (see https://crashoverride.com/docs/chalk)
##

## Spec for command line.


default_recursive_doc := """
"Determines whether a file scan will recursively walk paths to find artifacts.
"""

getopts {
  # If this is set when we call getoptFinalize(), it'll get used.
  command_attribute: "default_command"
  default_yes_prefixes: []
  default_no_prefixes: ["no"]
  show_doc_on_err: true
  add_help_commands: true
  shortdoc: """Chalk
Collect and report software and host metadata  
"""  
  doc: """
Chalk's core purpose is to map production software with its
development, and to provide information about those artifacts in CI/CD
and in production. Usually, metadata is produced at CI/CD time after
software is built, and then collected from production. This command
can both insert and extract, and send data off as appropriate. This
tool is meant to be easy in CI/CD-- just drop it into the right place
in the pipeline, and never think about it again. At the same time,
it's very customizable. Administrators can easily produce stand-alone
binaries that collect custom metadata. The chalk command's behavior is
easily customized, primarily via a flexible configuration file. The
options provided at the command line are reserved for items where
there's an obvious utilitiy in overriding without editing the config
file. See the Chalk Users Guide for more information.
"""
  arg_name: "ARG"

  flag_yn color {
    yes_aliases: ["c"]
    no_aliases:  ["C"]
    field_to_set: "color"
    doc: "Enable colors (overriding any config file settings)"
  }

  flag_help { }

  flag_choice log_level {
    aliases:      ["l"]
    choices:      ["verbose", "trace", "info", "warn", "error", "none"]
    add_choice_flags: true
    field_to_set: "log_level"
    doc: """
Sets the console log-level to the specified value, controling what logs are output to the terminal.  Note that "verbose" and "trace" are aliases.
"""
  }

  flag_arg config_file {
    aliases:  ["f"]
    callback: func set_config_file
    doc: """
The location from which to read an external config file.

When this flag is passed, chalk ignores its search path; the only file it attempts to load is this one.
"""
  }

  flag_multi_arg enable_report {
    callback: func set_enabled_reports
    doc: """
Explicitly enable a specfic `custom_report` defined in the configuration file, even if it is not enabled in that configuration file.
"""

  }

  flag_multi_arg disable_report {
    callback: func set_disabled_reports
    doc: """
Explicitly _disable_ a specfic `custom_report` defined in the configuration file.
"""
  }

  flag_arg report_cache_file {
    callback: func set_report_cache_file
    doc: """
This overrides the locaction of the report cache, if chalk is configured to use it.
The reporting cache keeps a local copy of any reports made, to provide redundancy if there are network errors.
"""
  }

  flag_yn time {
    field_to_set: "report_total_time"
    doc: """
Reports the total run time of the chalk executable in seconds.
"""    
  }

  flag_yn use_embedded_config {
    field_to_set: "load_embedded_config"
    doc: """
Ensure that embedded configuration runs. This flag should never be
necessary, since there is no way to override the internal value before
the embedded configuration runs.  However, the negation flag can be
used to keep the embedded configuration from running.

This is most useful when testing configuration files via an external
configuration file, to avoid conflicts that can arise when running
both configurations.
"""
  }

  flag_yn use_external_config {
    field_to_set: "load_external_config"
    doc: """
Turn on/off checking for (and running) any external configuration file.
"""
  }

  flag_yn show_config {
    yes_aliases: ["config"]
    
    field_to_set: "show_config"
    doc: """This flag runs chalk, then, at the end, outputs state information specific to that invocation of chalk.

This is similar to the `chalk config` command, except it shows state information specific to this particular invocation (whereas `chalk config` doesn't perform any action other than loading the configuration file).
"""
  }

  flag_yn run_sbom_tools {
    field_to_set: "run_sbom_tools"
    doc: """
For insertion operations, this flag forces running any configured tools for SBOM collection. It does not guarantee reporting or chalking; that is up to the reporting configuration.

In the default chalk configuration, these tools do not run at all.

This flag is defined for all chalk commands, but currently is ignored for any command except "insert" or "docker".
"""
  }

  flag_yn run_sast_tools {
    field_to_set: "run_sast_tools"
    doc: """
For insertion operations, this flag forces running any configured tools for performing static analysis. It does not guarantee reporting or chalking; that is up to the reporting configuration.

In the default chalk configuration, these tools do not run at all.

This flag is defined for all chalk commands, but currently is ignored for any command except "insert" or "docker".
"""
  }

  flag_yn use_report_cache {
    field_to_set: "use_report_cache"
    doc: """
Enables or disables the reporting cache.  The reporting cache is a ring buffer stored locally, that contains reporting information that could not be delivered to its configured sources, due to some outage.

When using the report cache, any time chalk does run reports, it will try to flush as much of the cache as it can.
"""
  }

  flag_yn virtual {
    yes_aliases:  ["v", "dry-run"]
    no_aliases:   ["V", "no-dry-run"]
    field_to_set: "virtual_chalk"

    doc: """
When chalking, do NOT modify artifacts, overriding anything defined in the config file. This is completely ignored for operations that do not normally modify artifacts.

Specifically, this flag only works with `chalk insert`, `chalk docker build`, and `chalk delete`.

By default, this will write to "./virtual-chalk.json".
"""
  }

  flag_yn debug {
    field_to_set: "chalk_debug"

    doc: """
Shows nim stack traces where appropriate, generally where exceptions were caught.

Additionally, if temporary files might be useful to inspect, this causes them to not get deleted.  Specifically, docker temporary files (most notably any docker file modifications) get left behind.
"""
  }

  flag_yn skip_command_report {
    field_to_set: "skip_command_report"
    yes_aliases: []
    no_aliases:  []

    doc: """
Skip publishing the command report (i.e., the PRIMARY report). NO output sinks will get it.

_For most commands, this defeats the purpose of Chalk, so use it sparingly._

Note that this doesn't turn off any custom reports; you have to disable those seprately.    
"""
  }

  flag_yn skip_summary_report {
    field_to_set: "skip_summary_report"
    doc: """
Whether to skip the summary report to the terminal.
"""    
  }

  flag_choice symlink_behavior {
    aliases: ["symlink_behaviour"]
    choices: ["skip", "clobber", "copy"]
    add_choice_flags: true
    field_to_set: "symlink_behavior"
    doc: """
Chalk never follows directory links. When running non-chalking operations, chalk will read the file on the other end of the link, and report using the file name of the link.
<p>
For insertion operations, Chalk will, out of the box, warn on symbolic links, without processing them. 
<p>
This variable controls what happens in those cases:

- <em>skip</em>   will not process files that are linked.
- <em>clobber</em> will read the artifact on the other end of the link, and, if writing, try to replace the file being linked to.
- <em>copy</em> will read the artifact on the other end of the link, and, if writing, will replace the link with a modified file, leaving the file on the other end of the link intact.
"""    
  }

  flag_yn wrap {
    field_to_set: "docker.wrap_entrypoint"
    doc: """
When building a container via `chalk docker`, this will cause Chalk to
automatically perform entry-point wrapping in such a way that built
containers will do a chalk report when they launch.  Note that the
'docker' command passes through ALL flags, so this flag needs to
technically be part of the 'global' flags, even though nothing else
uses it.
<p>
If, when wrapping, your chalk binary is using an external
configuration file, that file will NOT get used inside the
container. The wrapped binary currently only uses the embedded
configuration present in the binary at the time of the wrapping.
"""    
  }

    flag_yn pager {
      no_aliases: ["no-more", "no-less"]
      field_to_set: "use_pager"
      doc: """
Sets whether to display documents in the system pager for output.

At the moment, this is only honored for the `chalk help` command.
"""      
     }


  command insert {
    aliases:  ["inject"]
    args:     (0, high())
    shortdoc: "Add chalk marks to artifacts"
    doc:      """
Add chalk marks to artifacts found on the file system.  See the `docker` command for adding marks to docker containers.
    
On chalking, what gets put into the chalk mark will be determined by the active chalk mark template after any user config file has loaded.  Each command's output configuration can be specified using the 'outconf' section in the configuration file.
<p>
For instance, if you create a new mark template named 'my_chalk_mark', you can activate it for both regular and docker insertions with the following in your configuration file:

```
outconf.insert.chalk = "myconf"
outconf.docker.chalk = "myconf"
```

For information on mark templates on the command line, see: `chalk help templates`
"""
    callback: func set_artifact_search_path(list[string])

    flag_yn recursive {
      yes_aliases: ["r"]
      no_aliases: ["R"]
      doc: default_recursive_doc
      field_to_set: "recursive"
    }

    flag_arg mark_template {
      field_to_set: "outconf.insert.mark_template"
      doc: """
This changes which template to use to create any chalk marks for this
run. The named Chalk mark template must already exist in your
configuration.
"""
    }

    flag_arg report_template {
      field_to_set: "outconf.insert.report_template"
      doc: """
This changes the reporting template to use for the default report.
The named reporting template must already exist in your configuration.
"""
    }
}

  command extract {
    aliases:       []
    args:          (0, high())
    callback:      func set_artifact_search_path(list[string])
    arg_sub_mutex: false
    shortdoc: "Find chalk marks in artifacts"
    doc: """
This command looks for existing chalk marks in artifacts as specified
by any command line arguments passed. The arguments can be files,
directories, container identifiers, or container image identifiers.

Chalk will attempt to find all matching marks, and will report on what
it finds, based on your reporting configuration.
"""

    flag_yn recursive {
      yes_aliases: ["r"]
      no_aliases: ["R"]
      doc: default_recursive_doc
      field_to_set: "recursive"
    }

    flag_arg report_template {
      field_to_set: "outconf.extract.report_template"
      doc: """
This changes the reporting template to use for the default report.
The named reporting template must already exist in your configuration.
"""
    }

    flag_yn search_layers {
      doc: """
When a mark in an image can't be found, should we try to report on
overwitten marks?      
"""
      field_to_set: "extract.search_base_layers_for_marks"
    }

    command images {
      shortdoc: "Find marks in local docker images"
      doc: """
This command will look at any docker images available locally, attempting to find chalk marks in them.
<p>
Note that this does not look through running containers; use `chalk extract containers` or `chalk extract all`.
"""
    }

    command containers {
      shortdoc: "Find marks in running containers"
      doc: """
This command will look at any docker containers available locally, attempting to find chalk marks in them.
"""      
    }

    command all {
      aliases:  []
      args:     (0, high())
      callback: func set_artifact_search_path(list[string])
      shortdoc: "Find all docker marks, plus filesystem marks"
      doc: """
This command will attempt to extract chalk marks in all containers,
container images for anything it can find on the local machine, AND will
search the current working directory for chalk marks.
"""      
    }
}

  command delete {
    aliases:  []
    args:     (0, high())
    callback: func set_artifact_search_path(list[string])
    shortdoc: "Delete chalk marks from software"
    doc: """
Deletes metadata from all artifacts specified in the search path.
"""

    flag_yn recursive {
      yes_aliases: ["r"]
      no_aliases: ["R"]
      doc: default_recursive_doc
      field_to_set: "recursive"
    }

    flag_arg report_template {
      field_to_set: "outconf.delete.report_template"
      doc: """
This changes the reporting template to use for the default report.
The named reporting template must already exist in your configuration.
"""
    }
  }

  command env {
    aliases: ["environment"]
    shortdoc: "Run a chalk report on the current environment"
 doc: """
Reports environmental information, without scanning for chalk. If a chalk ID or metadata ID is passed at the command line, then a chalk can be reported with just that metadata. This is intended to be a lightweight version of 'extract' tied to a single artifact.
"""
  }

  command exec {
    args:     (0, high())
    ignore_bad_flags: true
    shortdoc: "Start a program, and report on it"
    doc: """
Directly execs a specified process, and in parallel forks off to reports environmental information, without scanning for chalk.  If a chalk ID or metadata ID is passed at the command line, then a chalk can be reported with just that metadata.
<p>
This is like the 'env' command, except for the exec'ing.  The configuration for 'exec' is best put into the configuration file.
"""

    flag_arg exec_command_name {
      field_to_set: "exec.command_name"
      doc: """
When using the 'exec' command, this allows you to explicitly set the command to call at the command line.  Arguments may be passed as arguments to 'chalk exec'.
"""
    }

    flag_yn chalk_as_parent {
      yes_aliases: ["pg13", "pg-13"]
      no_aliases:  ["no-pg13", "no-pg-13"]
      field_to_set: "exec.chalk_as_parent"
      doc: """
When set to true, 'chalk exec' will leave chalk as the parent process (By default, the process to exec stays the parent, and chalk is forked off).
<p>
This is most useful for short-lived processes, as it ensures chalk will complete any reporting.
"""      
    }

    flag_yn heartbeat {
    field_to_set: "exec.heartbeat"
    doc: """
When set to true, causes periodic reports to be run, past the initial one.    
"""    
    }

    flag_arg report_template {
      field_to_set: "outconf.exec.report_template"
      doc: """
This changes the reporting template to use for the default report.
The named reporting template must already exist in your configuration.
"""
    }
  }
  command config {
    aliases:  []
    shortdoc: "Show configuration variables and settings"
    doc: """
Shows the results of evaluating the configuration, without actually doing any work with artifacts.
<p>
Even though they are related, there is a significant difference between the 'config' command and the --show-config flag.  They both dump the configuration after evaluating any config file, but they may easily produce different results.
<p>
That's because chalk uses 'con4m' for configuration, which, while typically just looking like a regular config file, can have arbitrary code added, with conditionals, and so-on.  The default configuration does, for instance, configure different output handlers, depending on the command given.
<p>
Running the 'defaults' command will therefore give you the information about the evaluation just when that command ran.  Whereas, '--show-config extract' will dump the config as it resolves when you run the 'extract' command, which could be very similar, or very different.
<p>
Importantly though, running '--show-config extract' still runs the 'extract' command.
<p>
This command does not show the contents of the config file(s) used, just key results from executing those config files.  And, generally there will be at least two 'stacked' configuration files.  See 'help config' for more information on the configuration file and con4m.
"""
}

  command dump {
    args:    (0, 1)
    shortdoc: "Print the embedded configuration file"
    doc: """
Reads the embedded configuration file, and outputs it, based on your output configuration (see 'help output').  In the default configuration, if no argument is given, the config file is written to stdout; and if an argument is provided, it will try write the configuration to the file specified by the argument.
<p>
This behavior can be overridden by the configuration file, where you can specify different output configurations.  See 'help config' for an overview of the configuration file format, and 'help output' for an overview of the output system.

"""
  }

  command load {
    aliases:  []
    args:     (1, 1)
    callback: func on_conf_load(list[string])
    shortdoc: "Load a new configuration into the chalk binary"
    doc: """
Attempt to replaces the embedded configuration file, reading from the
specified file name.
<p>
You can use the 'dump' command to dump the output first.
<p>
From the command line, See 'help config' for an overview of the configuration file format.
"""

    flag_yn replace {
      field_to_set: "load.replace_conf"
      doc: """
When on, the entire stored configuration file will be REPLACED with the
provided argument. When off, it's used only as a component that's added
to the config.
"""      
    }
    
    flag_yn validation {
      field_to_set: "load.validate_configs_on_load"
      doc: """
When on, validate config files before loading them, by doing a trial run.
"""
    }

    flag_yn validation_warning {
      field_to_set: "load.validation_warning"
      doc: """
This verbose flag controls whether or not you get the verbose warning.  It's much better turning this off in your embedded configuration :)
"""      
    }
  }

  command version {
    shortdoc: "Give version information"
    doc: """
Outputs basic version information for the chalk binary.
"""
  }
  
   command docgen {
     shortdoc: "Generate the web documentation."
     doc: """          
Writes web documentation into `./chalk-docs/` in Markdown format, with
some inline HTML.
"""
   }

  command docker {
    shortdoc: "Run a docker command, then chalk built or pushed containers"
    args:    (0, high())
    ignore_all_flags: true
    doc: """
Chalk a container operation.  This always transparently calls docker, as long as it is anywhere in your path (even if 'chalk' is named 'docker').

Currently, Chalk only collects metadata for 'docker' and 'push' commands.
<p>
All arguments appearing after the word 'docker' are passed to docker.  No flags to chalk can appear after the command.
"""
  }

  command setup {
    arg_sub_mutex: false # should be the default?
    shortdoc: "Set up automatic code signing"
    doc: """
Set up code signing / attestation.
<p>
This is used to either generate or load a keypair for code signing.
<p>
Without a subcommand, chalk will first attempt to run as if the `load`
subcommand were given, and if it doesn't find a keypair to load, then
it will run the `gen` command to create one.
"""

  flag_yn store_password {
    field_to_set: "use_internal_password"
    doc: """
Sets whether to cache an encrypted copy of the password inside the
chalk binary. This requires good operationational security on the
binary, so using a secret manager to set the password is ideal, but
this option is better than hardcoding the password in a script that
calls Chalk.
"""
  }

  flag_arg key_file {
    field_to_set: "signing_key_location"
    doc: """
Sets the location of the signing key file on local disk. This should
point to the private key file and end in `.key`. The public key file
must be in the same base location, with the same file name, except
with `.pub` as the file extension.
"""    
  }

  flag_yn api_login {
    field_to_set: "api_login"
    doc: """Enable/disable the use of the Crash Override API for secret management."""
  }
  
  command gen {
    shortdoc: "Force generation of new signing key"
    doc: """
Chalk will generate a new
password and keypair.  It will write the password to the terminal a
single time, and will write the keypair to `./chalk.key` (private key)
and `./chalk.pub` (public key).
<p>
The password is needed to load the keys into a different chalk binary,
and is required for signing. By default, you must provide the password
in an environment variable named `CHALK_PASSWORD`.  Be careful to
remove it from the environment after your chalk invocation, to avoid
leakage.
<p>
Generally, that option is intended for running with a secrets
manager. However, if you are going to hardcode the password and rely
on operational security, you can hardcode the password directly into
the Chalk binary with the `--store-password` option.
<p>
That will store the password inside the chalk mark, encrypted with a
key that is chosen at `gen` time (on a Mac this is not possible; it's
chosen when you compile the binary).
<p>
This approach will NOT thwart someone who has read access to the
binary, so a proper secret manager is the recommended solution.
"""
  }

  command load {
    shortdoc: "Load existing signing key"
    doc: """
This looks for a keypair to import, by default in ./chalk.key (private
key) and ./chalk.pub (public key).  The key should have previously
been generated by chalk, and encrypted with a password.
<p>
Pass `--store-password` to keep an encrypted copy of the password
internally, per the `gen` command.
"""    
  }
  
}

  command help {
    ignore_all_flags:   true
    arg_sub_mutex: false # should be the default?
    args: (0, high())
    shortdoc: "Observability for the Software Development Lifecycle"
    doc: """Chalk is an observability tool for the software development
lifecycle, helping developers get visibility into where and how their
software is deployed, and helping Ops people get visibility on who
owns the software and what it does. It's kind of like GPS for your
software.
<p>
Chalk generally drops into CI/CD to collect information about the
source and build, then adds a **chalk mark** to software to make it
easy to identify in the real world. It can also **wrap** the software,
which basically means chalk will follow the software into production
to collect telemetry about the deployment environment.
<p>
Chalk is meant to be 'easy' in that you can just drop it into a CI/CD
pipeline and never have to think about it. However, it is tremendously
flexible in what it can collect and how it reports.
<p>
There's a graphical configuration tool in progress. There is also
plenty of in-command help. Currently, the interface is being redone,
but for the moment:
<p>

- <jazzberry>chalk help commands</jazzberry> shows the overview help for the command line.
- <jazzberry>chalk help "cmdname" </jazzberry> shows the help for an individual command, as does <em>chalk "cmdname" --help</em>
- <jazzberry>chalk help config</jazzberry> shows the overview help for configuration options you can set via the <em>chalk load</em> command.
- <jazzberry>chalk help metadata</jazzberry> shows information about the many types of metadata that you can choose to collect.
- <jazzberry>chalk help builtins</jazzberry> shows information about built-in functions that you can use in a custom configuration to do your own data collection or customization.
- <jazzberry>chalk help topics</jazzberry> will show a list of long-form help documents that
  can be read from the command line.
- <jazzberry>chalk help search "term"</jazzberry> will search all help documents (as will help
commands that do not match known topics)
"""
  }

command logout {
    shortdoc: "Logout of API"
    doc: """
Logs out of the API by deleting the saved API tokens.
"""
}

command login {
    shortdoc: "Start API login process"
    doc: """
Starts the API login process and will provide a URL to follow in a browser to complete authentication.
"""
  }


}

func set_config_file(filename) {
   dir, file := filename.path_split()
   arr := attr_get("config_path", list[string])
   add_override("config_path", array_add(arr, [dir]))
   add_override("config_filename", file)
   return ""
}

reports_seen  := []
export reports_seen

func set_reports_on_off(names: list[string], val) {
   result := ""
   reports := sections("custom_report")
   for i from 0 to len(names) {
     if reports_seen.contains(names[i]) {
       return "Already set a value for report '" + names[i] + "'"
     }
     reports_seen := array_add(reports_seen, [names[i]])
     if not reports.contains(names[i]) {
       return ("No such report: '" + names[i] + "'\nKnown reports are: " +
               reports.join(", "))
     }
     add_override("custom_report." + names[i] + ".enabled", val)
   }
}

func set_enabled_reports(names) {
  return set_reports_on_off(names, true)
}

func set_disabled_reports(names) {
  return set_reports_on_off(names, false)
}

func set_report_cache_file(file) {
  result := ""

  add_override("use_report_cache", true)
  add_override("report_cache_location", file)
}

func set_artifact_search_path(args: list[string]) {
  if args.len() == 0 {
    return
  }

  add_override("artifact_search_path", args)
}

func on_conf_load(args: list[string]) {
  add_override("artifact_search_path", [program_path() + "/" + program_name()])
}
