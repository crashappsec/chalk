##
## Copyright (c) 2023, Crash Override, Inc.
##
## This file is part of Chalk
## (see https://crashoverride.com/docs/chalk)
##

## This is the first configuration file loaded, and basically provides
## data and defaults. The bulk of it specifies the default metadata
## schema (key blocks).
##
## There's also metadata about the plugin modules and sinks we have
## available.
##
## Actually, everything starting with base_* gets concatenated into one
## big file (kinda like an include):
##
## - base_keyspecs.c4m
## - base_plugins.c4m
## - base_sinks.c4m
## - base_auths.c4m
## - base_chalk_templates.c4m
## - base_report_templates.c4m
## - base_outconf.c4m
## - base_sinkconfs.c4m
##
## Conventions in the naming:
##
## 1. All runtime (i.e., per-operation) keys start with _, their names
##    are otherwise as descriptive as possible.
## 2. INJECTOR_ indicates info about the chalk process that did the chalking.
## 3. For information about the artifact or host that really is just
##    metadata expected only to have  applied at chalk time, the keys will
##    have _CHALKED, or _WHEN_CHALKED at the end, whichever reads more
##    naturally (as determined by me)
## 4. BUILD_ keys relate to the CI/CD process during chalk.
## 5. DOCKER_ keys relate to docker-specific information at the time a
##    `docker build` command was run.
## 6. Things that should be non-varying properties of an artifact itself
##    (including its chalk mark), and not metadata about the artifact's
##    lifecycle, are just named descriptively, including CHALK_ID, SBOM, etc.
##    I also include repo information in here, since such things seldom
##    change.
## 7. _PROCESS keys relate to info gleaned about a running process.
## 8. _IMAGE_ keys relate to info gleaned about a container image locally
##    available via docker.
## 9. _INSTANCE_ keys relate to info gleaned about a running container instance
## 10. _REPO_ keys relate to info gleaned about an image repo for containers
## 11. $ keys are *private* to the chalk implementation.
## 12. If I had any doubt that the runtime key's name might be confused with
##     something that one might expect be collected chalk-time, I added _OP.
##     the more basic per-op stuff such as "_CHALKS" and "ACTION_ID" I did not.

## CHALK SCHEMA
chalk_version :=   "0.4.5"
ascii_magic   :=   "dadfedabbadabbed"

# Field starting with an underscore (_) are "system" metadata fields, that
# are not conceptually part of the chalked metadata.

# Some of these fields may still get added to the chalk mark.
#
# Specifically: MAGIC must always be added, as in many contexts it
# might be necessary for finding the start of the mark.  But it generally
# must not be reported.
#
# _OPERATION, _ACTION_ID, _CURRENT_HASH, and _OP_ERRORS are
# metadata on the current chalk operation, and will not be embedded into
# chalk marks.
#
#
# Any other keys starting with $'s are meant to be reserved for the
# tool's internal use.  This reference implementation adds two:
# - $CHALK_CONFIG, which is used for self-injection of default config
#    data. Like MAGIC, it *does* get added to the mark.
#
# - $CHALK_IMPLEMENTATION_NAME which is used to indicate which version
#      of Chalk this is. It is added as part of the compilation process
#      to indicate this is a Chalk reference implementation binary,
#      which is used to facilitate command wrapping.
#
#      For instance, when wrapping 'docker', Chalk searches the path looking
#      for an _actual_ docker command. The presence of this field will
#      prevent a different chalk from trying to invoke this as 'docker'
#      (it might cause a recursive loop).

# Conforming tools MUST NOT output items consisting of underscores as part
# of a chalk mark (i.e., any extract operations).
#
# Similarly, system metadata fields unknown to the implementation SHOULD
# NOT be output under any circumstances, to discourage users from adding
# new metadata keys to the space.
#
# User-defined MUST begin with the X- prefix.
enum   ChalkTimeHost, ChalkTimeArtifact, RunTimeArtifact, RunTimeHost
export ChalkTimeHost, ChalkTimeArtifact, RunTimeArtifact, RunTimeHost

keyspec MAGIC {
    required_in_chalk_mark: true
    kind:                   ChalkTimeHost
    type:                   string
    standard:               true
    system:                 true
    conf_as_system:         true
    ~value:                 ascii_magic
    since:                  "0.1.0"
    normalized_order:       0
    shortdoc:         "Marker for identifying chalk marks"
    doc:              """
This key must appear as the first item in all chalk marks, and the
value cannot be changed. It is used to identify the beginning of a
chalk mark. While JSON objects typically do not support ordered keys,
we still require conforming marks to put this one first.

The chalk mark itself may be embedded in various ways, depending on
the artifact type. Still, this key is used to help ease detection.

This key should generally never be reported, as it is redundant to do so.
"""
}

keyspec CHALK_VERSION {
    required_in_chalk_mark: true
    kind:                   ChalkTimeArtifact
    type:                   string
    standard:               true
    system:                 true
    conf_as_system:         true
    ~value:                 chalk_version
    since:                  "0.1.0"
    normalized_order:       2
    shortdoc:         "Version of Chalk used for insertion"
    doc:              """
This represents the Chalk version used at the time of the insertion of
the Chalk mark. This must be added to each Chalk mark, to help ensure
compatibility with future versions.
"""
}

keyspec DATE_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order:  4
    shortdoc:         "Date of Chalk mark insertion"
    doc:              """
This gives a readable date that the chalk operation occurred, in the
local time zone set for the machine where the marking happened.

This field does *not* include the time of the marking. For that, you
can add the `TIME_CHALKED` key, use the `DATETIME_WHEN_CHALKED` key,
or use the `TIMESTAMP_WHEN_CHALKED` key.
"""
}

keyspec TIME_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order:  5
    shortdoc:         "Time of Chalk mark insertion"
    doc:              """
This is a string indicating the time of the chalk operation, in human
readable format, given in the local time zone of the machine on which
the chalk operation occurred. This only has one value per run-- when
chalking, `TIMESTAMP_WHEN_CHALKED` gives per-chalk time values, if
desired.
"""
}

keyspec TZ_OFFSET_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order: 6
    shortdoc:         "Time Zone for host when Chalk mark was inserted"
    doc:              """
The time zone offset from UTC of the machine on which the chalk
operation occurred, as collected when the chalk operation occurred.
"""
}

keyspec DATETIME_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order: 7
    shortdoc:         "Date and time of Chalk mark insertion"
    doc:              """
This field is a human readable time stamp indicating the time that the
chalk mark was made, using the local clock of the machine that did the
chalking. The value is a full ISO-8601 Date-time string, including a
timezone offset.

For insertion operations (including docker insertion), the value of
this field will represent the same moment in time that the reported
value of `_TIMESTAMP` would give for the operation.
"""
}

keyspec EARLIEST_VERSION {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    ~value:           chalk_version
    since:            "0.1.0"
    shortdoc:         "Reserved for future use"
    doc:              """
This key is reserved for future use; it is not currently used in any capacity.
"""
}

keyspec HOST_SYSNAME_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host sysname at Chalk time"
    doc:              """
On posix systems, value of `sysname` field from `uname()` syscall,
collected when chalk mark was created.
"""
}

keyspec HOST_NODENAME_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host node name at Chalk time"
    doc:              """
On posix systems, value of `nodename` field from `uname()` syscall,
collected when chalk mark was created.
"""
}

keyspec HOST_RELEASE_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host kernel release at Chalk time"
    doc:              """
On posix systems, value of `release` field from `uname()` syscall,
collected when chalk mark was created.
"""
}

keyspec HOST_VERSION_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host kernel version at Chalk time"
    doc:              """
On posix systems, value of `version` field from `uname()` syscall,
collected when chalk mark was created.
"""
}

keyspec HOST_MACHINE_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host machine at Chalk time"
    doc:              """
On posix systems, value of `machine` field from `uname()` syscall,
collected when chalk mark was created.
"""
}

keyspec PUBLIC_IPV4_ADDR_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.1.3"
    shortdoc:         "IPv4 address at Chalk time"
    doc:              """
This returns the IPv4 address on the local machine used to route
external traffic. It's determined by setting up a UDP connection to
Cloudflare's public DNS service, but does not involve sending any data.
"""
}

keyspec INJECTOR_CHALK_ID {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "CHALK_ID of the Chalk implementation creatining the mark"
    doc:              """
The `CHALK_ID` of the chalk binary used to create the chalk mark
"""
}

keyspec INJECTOR_PUBLIC_KEY {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    doc:              """
The public key stored within the injecting Chalk binary, as generated
by `chalk setup`. This key is configured to go into a Chalk mark
whenever you intend to sign software.  It can be added even if you're
not signing, however.
"""
}

keyspec INJECTOR_VERSION {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Version of chalk binary used to create the chalk mark"
    doc:              """
The software version for the chalk binary used in creating the chalk
mark (see also, `INJECTOR_CHALK_ID`).
"""
}

keyspec PLATFORM_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "OS and architecture chalk mark was created on"
    doc:              """
A string consisting of the OS and system architecture of the platform
on which the chalk mark was created.
"""
}

keyspec INJECTOR_COMMIT_ID {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Commit ID for the injecting Chalk binary"
    doc:              """
The commit hash used to build the chalk binary that created the chalk
mark.
"""
}

keyspec INJECTOR_ARGV {
    kind:             ChalkTimeHost
    type:             list[string]
    standard:         true
    system:           true
    conf_as_system:   true
    ~callback:        func get_args
    since:            "0.1.0"
    shortdoc: "Chalk insertion operation's command line args"
    doc:              """
This field contains the full contents of the command line arguments
used to invoke `chalk` at the time of an insertion operation.
"""
}

keyspec INJECTOR_ENV {
    kind:             ChalkTimeHost
    type:             dict[string, string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Environment variables at Chalk mark insertion time"
    doc:              """
Environment variables set at the time when `chalk` was invoked for an
insertion operation.

Data from environment variables defaults to being redacted, meaning
the variable names will be reported, but not the contents. However,
this can be tweaked on a per-environment variable basis.

The behavior is configured with the following configuration attributes:

- **env_always_show**, a list of environment variables to show unredacted.
- **env_never_show**, a list of environment variables NOT to show in this
  report.
- **env_redact**, a list of environment variables to redact.
- **env_default_action**, a value ("show", "redact", "ignore") that indicates
  what to do for unnamed environment variables. This defaults to "redact".

Currently, this filtering is not handled per-report, meaning `ENV` and
`_ENV` will always be identical if you attempt to collect both at
chalk time.
"""
}

keyspec TENANT_ID_WHEN_CHALKED {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Tenant info added at mark time"
    doc:              """
A user-defined unique identifier, intended to represent a unique user
in multi-tenant environments. This key is set only at the time in
which a chalk operation occurs. Its value can be used at that time for
various URL substitutions (for instance, in the `CHALK_PTR` key).

The default OSS configuration never sets this value, but it can be
configured manually, or in binaries created by tooling.
"""
}

keyspec CHALK_ID {
    required_in_chalk_mark: true
    kind:                   ChalkTimeArtifact
    never_early:            true
    type:                   string
    standard:               true
    system:                 true
    since:                  "0.1.0"
    normalized_order:       1
   shortdoc:         "Unique identifier for unchalked software artifacts"
    doc:              """
This is a unique identifier for an *unchalked* software artifact. When
possible, if the same unchalked artifact is chalked on two different
machines, it will give identical `CHALK_ID`s.

Chalk marks are always four groups of characters separated by dashes;
the first and last group are six characters, and the middle two groups
four characters.

The non-dash characters are taken from a base32 character set, and the
letters will always be upper case.

Any time a chalk mark is created for a piece of software, this field
must be part of the mark.

Whenever possible, the `CHALK_ID` will be derived from the hash of the
unchalked artifact (we encoded 100 bits from the hash). This helps
ensure that different machines will calculate the same `CHALK_ID` on
the same artifact.

Currently, the hash is used for calculating this value for all
artifact types *EXPECT* docker images, where we cannot reliably get
such a value. In that case, the value is randomly selected, and will
be different every time.

This identifier differs from the `METADATA_ID` in that the `CHALK_ID`
is a unique identifier for the unchalked artifact, whereas
`METADATA_ID` is a unique identifier for the *CHALKED* artifact. A
single file can have multiple `METADATA_ID`s when chalked multiple
times, but only one `CHALK_ID` (again, excepting docker images).

See the documentation for `METADATA_ID` for more information.
"""
}

keyspec TIMESTAMP_WHEN_CHALKED {
    kind:             ChalkTimeArtifact
    type:             int
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order: 3
    shortdoc:         "Time of Chalk mark insertion"
    doc:              """
This field consists of the number of milliseconds since the Unix
epoch, at the time the chalk mark was created for the given
artifact. The Unix epoch started at the beginning of Jan 1, 1970, UTC.

When multiple pieces of software are marked in the same run of Chalk,
this will generally indicate the time between chalks.

If, instead of an integer, you would like a more readable
representation, check out the `DATE_CHALKED`, `TIME_CHALKED`,
`TZ_OFFSET_WHEN_CHALKED` and `DATETIME_WHEN_CHALKED` keys, though
those keys are computed once per-run, and not on a per-artifact basis.
"""
}

keyspec CHALK_PTR {
    kind:                  ChalkTimeArtifact
    type:                  string
    standard:              true
    since:                 "0.1.0"
    apply_substitutions:   true
    shortdoc:              "Reference to storage for artifact metadata"
    doc:                   """
This field is set at Chalk time, and is user definable. It should be
used to inject a URL into the software, where the URL indicates the
location of the report created at Chalk time for this artifact.


There are special substitution variables to allow you to include
artifact-specific information in the URL, all of which are evaluated
at the time of chalking:

 - **{chalk_id}** is replaced with the `CHALK_ID` for this software.
 - **{now}** is replaced with an integer timestamp, and will be identical
   to the value of the software's `TIMESTAMP_WHEN_CHALKED` field, if used.
 - **{path}** is replaced with the `PATH_WHEN_CHALKED` field for the artifact,
 generally representing the software's location on the file system at the time
 of chalking.
 - **{hash}** is replaced with the software artifact's `HASH` field (the Chalk
 hash; see `chalk help hashing`).
 - **{tenant}** is replaced with the software artifact's
 `TENANT_ID_WHEN_CHALKED` field, as set at the time of chalking.
 - **{random}** is replaced with the value of `CHALK_RAND`, as set at the
 time of chalking.

The above substitutions all occur, even if the given keys are not
added to the software's chalk mark. See the documentation on those
individual metadata keys for more information about their semantics.
"""
}

keyspec PATH_WHEN_CHALKED {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    codec:            true
    shortdoc:         "Location for software at Chalk time"
    doc:              """
This key represents the file system path for the artifact, _at the time the
chalk mark was added_.
"""
}

keyspec PATH_WITHIN_ZIP {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    codec:            true
    since:            "0.1.0"
    doc:              """
For items chalked when they were in a ZIP file, this field gets their path
within that ZIP file.
"""
}

keyspec CONTAINING_ARTIFACT_WHEN_CHALKED {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    codec:            true
    since:            "0.1.0"
    doc:              """

For items chalked when they were in a embedded into a ZIP file, this is the
`CHALK_ID` of the containing artifact.
"""
}

keyspec ARTIFACT_TYPE {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    codec:            true
    since:            "0.1.0"
    shortdoc:         "Type of the artifact, determined during Chalk marking"
    doc: """
A string indicating the type of a software artifact, as determined when the
chalk mark was added. Values can include:

 - ELF (non-MacOS Unix)
 - Mach-O executable
 - Unix Script
 - Docker Image
 - Docker Container
 - Python
 - Python Bytecode
 - ZIP
 - JAR
 - WAR
 - EAR

"""
}

keyspec HASH {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    codec:            true
    since:            "0.1.0"
    shortdoc:         "SHA-256 hash of the normalized, unmarked software"
    doc:              """
Hash file of artifact w/o chalk in it, to ensure extracted chalk is
intact.  The hash algorithm is specific to the codec, and is generally
a normalization of the file that is format specific.

It is NOT the file system hash. For Chalk's purposes, even when
inserting a chalk mark, the file system hash is not a good hash to use
to decided whether two artifacts are the same non-chalked item. For
instance, if you chalk an artifact that has already been chalked, the
chalk HASH algorithm will see they're the same artifact, but the file
system hashes would definitely differ.

Also, for some codecs, due to file format complexities, if you DELETE
a chalk mark from an artifact, you may not get the same bits back as
before any chalk mark was inserted.

That's because there's a normalization process applied, and reversing
it is not worth the effort, especially for things like ZIP files and
ELF binaries, where the logic involved would be complex, and it would
also require storing data.

The codec-specific normalization process ensures the artifact
semantics are always valid, and that we have a consistent way to
hash. It just doesn't always enable recovering the original bits.

Nonetheless:

1. The `_CURRENT_HASH` key will always give you the hash of the file
on the file system, at the end of the current operation.

2. For file system artifacts, The `PRE_CHALK_HASH` field will give the
file system hash before insertion. __However__, this is calculated
without considering whether it is already chalked of not.

Additionally, some types of artifact (particularly Docker containers)
may not have a pre-chalk HASH value that we can easily compute, in
which case this field will not be reported.

See `chalk help hashing` for more information.
"""
}

keyspec PRE_CHALK_HASH {
    kind:                ChalkTimeArtifact
    type:                string
    standard:            true
    since:               "0.1.1"
    doc:                 """
For chalking operations only, this is the SHA-256 hash value of the
file, before the chalking operation took place.

This key does process chalk marks, only bits on disk. That is, if the
file was previously chalked before the current insertion, the hash
will include the old chalk mark being replaced.

The run-time key `_CURRENT_HASH` is available on all operations, and
for file system objects, gives the hash on disk after the operation
concludes.
"""
}

# This is one that could be different per-artifact, but our current
# collectors only collect at a host level.
keyspec ORIGIN_URI {
    kind:                ChalkTimeArtifact
    type:                string
    standard:            true
    since:               "0.1.0"
    apply_substitutions: true
    shortdoc:            "URI for repository associated at time of marking"
    doc:                 """
The URI associated with the origin of the source code repository found at the
time of chalk mark insertion.
"""
}

keyspec AUTHOR {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.2"
    shortdoc:         "Author of most recent commit"
    doc:              """
The author of the most recent commit in the current branch, which is likely the same as the committer but not always.
"""
}

keyspec DATE_AUTHORED {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.2"
    shortdoc:         "Human readable timestamp of the author's commit"
    doc:              """
The date of the authored commit in the same format as `git log`: 3-letter week-day, 3-letter month, day of month, HH:mm:ss <time-zone-offset>
"""
}

keyspec COMMITTER {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.2"
    shortdoc:         "Committer of most recent commit"
    doc:              """
The committer of the most recent commit in the current branch.
"""
}

keyspec DATE_COMMITTED {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.2"
    shortdoc:         "Human readable timestamp of most recent commit"
    doc:              """
The date of the authored commit in the same format as `git log`: 3-letter week-day, 3-letter month, day of month, HH:mm:ss <time-zone-offset>
"""
}

keyspec COMMIT_MESSAGE {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.3.3"
    shortdoc:         "Commit message of most recent commit"
    doc:              """
The commit message of the most recent commit in the current branch.
If the commit is signed, the COMMIT_MESSAGE value does not contain the signature.
"""
}

keyspec BRANCH {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Current repo branch at time of marking"
    doc:              """
The branch name found in the source code repository found at the time
of chalk mark insertion.
"""
}

keyspec TAG {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.3.0"
    shortdoc:         "Current repo tag at time of marking"
    doc:              """
The latest tag name found in the source code repository found at the time
of chalk mark insertion. Annotated tags take precedence over regular tags.

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec TAG_SIGNED {
    kind:             ChalkTimeArtifact
    type:             bool
    standard:         true
    since:            "0.3.0"
    shortdoc:         "Whether the tag is signed"
    doc:              """
If the most recent tag was signed.

Signed tags are automatically annotated.
To sign commit use `-s` parameter: `git tag -s -m "comment"`.
"""
}

keyspec TAGGER {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.3.0"
    shortdoc:         "Tagger of most recent tag"
    doc:              """
The tagger of the most recent annotated tag.

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec DATE_TAGGED {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.3.0"
    shortdoc:         "Human readable timestamp of most recent tag"
    doc:              """
The date of the annotated tag in the same format as `git log`: 3-letter week-day, 3-letter month, day of month, HH:mm:ss <time-zone-offset>

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec TAG_MESSAGE {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.3.3"
    shortdoc:         "Tag message of the most recent annotated tag"
    doc:              """
The tag message of the most recent annotated tag found in the source code
repository at the time of chalk mark insertion.

If the tag is signed, the TAG_MESSAGE value does not contain the signature.

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec COMMIT_ID {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Commit ID in current repo at time of marking"
    doc:              """
The most recent commit hash or id for the current repository and
branch identified at the time of chalk mark insertion.
"""
}

keyspec COMMIT_SIGNED {
    kind:             ChalkTimeArtifact
    type:             bool
    standard:         true
    since:            "0.3.0"
    shortdoc:         "Whether the commit is signed"
    doc:              """
If the most recent commit was signed.

To sign commits use `-S` parameter: `git commit -S`.
"""
}

keyspec _ORIGIN_URI {
    kind:                RunTimeHost
    type:                string
    standard:            true
    since:               "0.4.0"
    apply_substitutions: true
    shortdoc:            "URI for repository associated at time of marking"
    doc:                 """
The URI associated with the origin of the source code repository found at the
time of chalk operation.
"""
}

keyspec _AUTHOR {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Author of most recent commit"
    doc:              """
The author of the most recent commit in the current branch, which is likely the same as the committer but not always.
"""
}

keyspec _DATE_AUTHORED {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Human readable timestamp of the author's commit"
    doc:              """
The date of the authored commit in the same format as `git log`: 3-letter week-day, 3-letter month, day of month, HH:mm:ss <time-zone-offset>
"""
}

keyspec _COMMITTER {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Committer of most recent commit"
    doc:              """
The committer of the most recent commit in the current branch.
"""
}

keyspec _DATE_COMMITTED {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Human readable timestamp of most recent commit"
    doc:              """
The date of the authored commit in the same format as `git log`: 3-letter week-day, 3-letter month, day of month, HH:mm:ss <time-zone-offset>
"""
}

keyspec _COMMIT_MESSAGE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Commit message of most recent commit"
    doc:              """
The commit message of the most recent commit in the current branch.
If the commit is signed, the COMMIT_MESSAGE value does not contain the signature.
"""
}

keyspec _BRANCH {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Current repo branch at time of marking"
    doc:              """
The branch name found in the source code repository found at the time
of chalk operation.
"""
}

keyspec _TAG {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Current repo tag at time of marking"
    doc:              """
The latest tag name found in the source code repository found at the time
of chalk operation. Annotated tags take precedence over regular tags.

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec _TAG_SIGNED {
    kind:             RunTimeHost
    type:             bool
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Whether the tag is signed"
    doc:              """
If the most recent tag was signed.

Signed tags are automatically annotated.
To sign commit use `-s` parameter: `git tag -s -m "comment"`.
"""
}

keyspec _TAGGER {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Tagger of most recent tag"
    doc:              """
The tagger of the most recent annotated tag.

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec _DATE_TAGGED {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Human readable timestamp of most recent tag"
    doc:              """
The date of the annotated tag in the same format as `git log`: 3-letter week-day, 3-letter month, day of month, HH:mm:ss <time-zone-offset>

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec _TAG_MESSAGE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Tag message of the most recent annotated tag"
    doc:              """
The tag message of the most recent annotated tag found in the source code
repository at the time of chalk operation.

If the tag is signed, the TAG_MESSAGE value does not contain the signature.

Annotated tags are created with `git tag -a -m "comment"`.
"""
}

keyspec _COMMIT_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Commit ID in current repo at time of marking"
    doc:              """
The most recent commit hash or id for the current repository and
branch identified at the time of chalk operation.
"""
}

keyspec _COMMIT_SIGNED {
    kind:             RunTimeHost
    type:             bool
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Whether the commit is signed"
    doc:              """
If the most recent commit was signed.

To sign commits use `-S` parameter: `git commit -S`.
"""
}

keyspec ARTIFACT_VERSION {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Version info for software artifact"
    doc:              """
This is reserved for future use; plugins specific to managed software
environments are expected to set this field. However, you can manually
set this value if desired.

This metadata key is meant to represent a software artifact's version
information, at the time that a chalk mark is inserted.
"""
}

keyspec STORE_URI {
    kind:                ChalkTimeArtifact
    type:                string
    standard:            true
    since:               "0.1.0"
    apply_substitutions: true
    shortdoc: "URI for intended internal storage repo for artifact"
    doc:                 """
This field's value should be set to the URI of the software artifact's
intended storage location, at the time of chalking. Generally, this
field is meant for internal repository information, not public
information.

Currently, this field is not set by any chalk plugins. The user can
configure it to be set to a custom value.

This field can apply any of the same substitutions supported in the
`CHALK_PTR` field (see that key for details).
"""
}

keyspec PACKAGE_URI {
    kind:               ChalkTimeArtifact
    type:               string
    standard:           true
    since:              "0.1.0"
    apply_substitutions: true
    shortdoc: "URI for public distribution point for this artifact"
    doc:                 """
This field's value should be set to the URI associated with a primary
public distribution point for the software artifact, as of the time of
chalking.

Currently, this field is not set by any chalk plugins. The user can
configure it to be set to a custom value.

This field can apply any of the same substitutions supported in the
`CHALK_PTR` field (see that key for details).
"""
}

keyspec CODE_OWNERS {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Code owners determined at Chalk time"
    doc:              """
This contains any identified code owners at the time that software was
chalked. Generally, this is a free-form field.

In the case where the chalking operation finds a `CODEOWNERS` or
`AUTHORS` file, it currently captures the entire free-form file. The
system does NOT currently attempt to extract only relevant parties,
based on local file system path.
"""
}

keyspec VCS_DIR_WHEN_CHALKED {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Directory at Chalk time under VCS"
    doc:              """
The version control directory tied to an artifact, identified at the
time of chalking.

This will contain the path information as found on the host on which
the artifact was chalked.
"""
}

keyspec BUILD_ORIGIN_ID {
  kind:     ChalkTimeHost
  type:     string
  standard: true
  since:    "0.4.1"
  shortdoc: "ID of the ORIGIN_URI in the CI/CD system"
  doc:      """
The ORIGIN_URI key reports the URI of the git origin remote.
This key, if available, will report the repo ID of the repository
as it is stored internally by the CI/CD system.

For GitHub this corresponds to repo REST ID.
For GitLab this is the project ID.
"""
}

keyspec BUILD_ORIGIN_KEY {
  kind:     ChalkTimeHost
  type:     string
  standard: true
  since:    "0.4.1"
  shortdoc: "Key of the ORIGIN_URI in the CI/CD system"
  doc:      """
Similar to BUILD_ORIGIN_ID and this reports supplemental repository
key for easier CI/CD API interactions.

For GitHub this corresponds to repo GraphQL node_id.
For GitLab this is not used.
"""
}

keyspec BUILD_ORIGIN_OWNER_ID {
  kind:     ChalkTimeHost
  type:     string
  standard: true
  since:    "0.4.1"
  shortdoc: "ID of the owner of ORIGIN_URI in the CI/CD system"
  doc:      """
The ORIGIN_URI key reports the URI of the git origin remote.
This key, if available, will report the repo owners ID of the repository
as it is stored internally by the CI/CD system.

For GitHub this corresponds to repo's org/user REST ID.
For GitLab this is the namespace ID.
"""
}

keyspec BUILD_ORIGIN_OWNER_KEY {
  kind:     ChalkTimeHost
  type:     string
  standard: true
  since:    "0.4.1"
  shortdoc: "Key of the owner of ORIGIN_URI in the CI/CD system"
  doc:      """
Similar to BUILD_ORIGIN_OWNER_ID and this reports supplemental owner
key for easier CI/CD API interactions.

For GitHub this corresponds to repos user/org GraphQL node_id.
For GitLab this is not used.
"""
}

keyspec BUILD_ID {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "CI/CD job info when adding chalk mark"
    doc:              """

If, at the time of chalking, the system can field will contain the
associated job ID.
"""
}

keyspec BUILD_URI {
    kind:                ChalkTimeHost
    type:                string
    standard:            true
    since:               "0.1.0"
    apply_substitutions: true
    shortdoc: "URI associated with build job at time of chalk"
    doc:                 """
If, at the time of chalking, the system can identify a CI/CD job, this
field will contain the URI associated with the job, if found.

This field is generally expected to be supplied by the user, and can
use the same substitutions allowed for the `CHALK_PTR` field (see that
key's documentation for more detail).
"""
}

keyspec BUILD_API_URI {
    kind:                ChalkTimeHost
    type:                string
    standard:            true
    since:               "0.1.0"
    apply_substitutions: true
    shortdoc: "API endpoint associated with chalk-time CI/CD job"
    doc:                 """
If, at the time of chalking, the system an identify a CI/CD job, and
there is a discernible API endpoint, this field will contain the URI
for that endpoint.

This field is generally expected to be supplied by the user, and can
use the same substitutions allowed for the `CHALK_PTR` field (see that
key's documentation for more detail).
"""
}

keyspec BUILD_COMMIT_ID {
  kind:     ChalkTimeHost
  type:     string
  standard: true
  since:    "0.4.5"
  shortdoc: "Commit ID which triggered the build"
  doc:      """
Commit ID which triggered the build in CI/CD at chalk time.
"""
}

keyspec BUILD_TRIGGER {
    kind:             ChalkTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Any recorded build trigger found at chalk time."
    doc:              """
Any recorded build trigger found at chalk time.
"""
}

keyspec BUILD_CONTACT {
    kind:             ChalkTimeHost
    type:             list[string]
    standard:         true
    since:            "0.1.0"
    shortdoc: "CI/CD contact info"
    doc:              """
Contact information set at chalk time for the person or people
associated with the triggered CI/CD job.
"""
}


keyspec CHALK_RAND {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    ~callback:        func call_rand
    since:            "0.1.0"
    shortdoc: "Chalk-time random number"
    doc:              """
A 64-bit random value created at chalk time only. This field is
selected per chalk (if enabled), and is intended to help ensure unique
`METADATA_ID` fields for artifacts in all circumstances. This is
encoded as hex digits.

This is intended for those people who want to be able to trace
specific artifacts to a specific build system.

Certainly, this key should be disabled in chalk marks if attempting
reproducible builds (in which case, also be sure not to chalk any keys
consisting of timestamps).

While there is a config-file callback associated with this metadata
key, it is set by the system, and cannot be overridden by the user.
"""
}

keyspec OLD_CHALK_METADATA_HASH {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Metadata hash captured when overwriting an existing chalk mark"
    doc:              """
In cases where a chalk insertion operation is being performed on a
software artifact that already contains a chalk mark, this field
represents the value of the `METADATA_HASH` field of the chalk mark
that is being replaced.

This helps support traceability in multi-stage CI/CD processes, where
it makes sense to inject (and/or report on) data at different points.

This field assumes that the old chalk mark was previously reported on,
in which case this field can be used as a reference to recover the
linked information.

See also the related key `OLD_CHALK_METADATA_ID`, which essentially
serves the same purpose, but using a different representation of the
data.
"""
}

keyspec OLD_CHALK_METADATA_ID {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Metadata ID captured when overwriting an existing chalk mark"
    doc:              """
In cases where a chalk insertion operation is being performed on a
software artifact that already contains a chalk mark, this field
represents the value of the `METADATA_ID` field of the chalk mark that
is being replaced.

This helps support traceability in multi-stage CI/CD processes, where
it makes sense to inject (and/or report on) data at different points.

This field assumes that the old chalk mark was previously reported on,
in which case this field can be used as a reference to recover the
linked information.

See also the related key `OLD_CHALK_METADATA_HASH`, which essentially
serves the same purpose, but using a different representation of the
data.
"""
}

keyspec EMBEDDED_CHALK {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             `x
    standard:         true
    codec:            true
    since:            "0.1.0"
    shortdoc: "Captured chalk marks for embedded documents"
    doc:              """
In cases where a software artifact consists of a container consisting
of other software artifacts, this field captures the full chalk marks
for any such embedded software, at the time in which artifacts are
chalked.

The format of this key is an array of chalk marks, identical to the
contents of the `_CHALKS` key.

Currently, this embedding can only be recorded with ZIP-formatted
artifacts, such as JAR files. This will not be collected unless the
configuration variable `chalk_contained_items` is set.

We do not currently support this capability with containers, or any
other type of embedded artifact.
"""
}

keyspec EMBEDDED_TMPDIR {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             string
    standard:         true
    codec:            true
    since:            "0.1.0"
    shortdoc: "Temporary directory used for processing embedded chalks, if used"
    doc:              """
When chalking embedded contents, the system uses a temporary
directory. This key captures the directory used for that
operation. Any directories in the sub-chalk will be under this path,
which will be reflected in path information for embedded artifacts.
"""
}

keyspec CLOUD_METADATA_WHEN_CHALKED {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Cloud provider metadata at chalk-time"
    doc:              """
Deprecated, and only available for the simplest of AWS environments.

Instead, please use individual metadata fields for cloud provider
metadata.
"""
}

keyspec SBOM {
    kind:             ChalkTimeArtifact
    type:             dict[string, dict[string, `x]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "SBOM(s) collected at Chalk time"
    doc:              """
This field is meant to captures any SBOMs associated with a chalking
(i.e., a chalk mark insertion operation). The value, when provided, is
a dictionary. The keys of that dictionary indicate the tool used to
perform the chalking, and the value consists of a free-form JSON
object returned if the SBOM creation is successful.

Currently, the only supported tool integration is `syft`. It does not
run by default, but if you enable the config variable `run_sbom_tools`
(which can be also done on the command line with `--run-sbom-tools`),
and if you configure the key to be chalked or reported (by editing the
appropriate profile), then chalk insertion operations will attempt to
run the tool, even downloading it from its official distribution
source if needed.

You may also set the field yourself if you have other tooling for
collecting this information.
"""
}

keyspec INFERRED_TECH_STACKS {
    kind:             ChalkTimeArtifact
    type:             `x
    standard:         true
    since:            "0.3.0"
    shortdoc: "Technologies used within the context of the active directory"
    doc:              """
This field is meant to capture technologies used in the context
of the directory from which chalk is being run, such as databases,
servers etc. The feature is currently experimental.
"""
}

keyspec _INFERRED_TECH_STACKS_HOST {
    kind:             RunTimeHost
    type:             `x
    standard:         true
    since:            "0.3.0"
    shortdoc: "Technologies used in the host where chalk is running in"
    doc:              """
This field is meant to capture technologies used in host on which
chalk is being run, such as databases,
servers etc. The feature is currently experimental.
"""
}

keyspec SAST {
    kind:             ChalkTimeArtifact
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.0"
    shortdoc: "SAST scan results collected at Chalk time"
    doc:              """
This field captures any static analysis security tooling reports that
are associated with a chalking (i.e., a chalk mark insertion
operation). The value, when provided, is a dictionary. The keys to
that dictionary indicate the tool used to perform the chalking, and
the value consists of a free-form JSON object returned if the SBOM
creation is successful.

Currently, the only supported tool integration is `semgrep`. It does
not run by default, but if you enable the config variable
`run_sast_tools` (which can be also done on the command line with
`--run-sast-tools`), and if you configure the key to be chalked or
reported (by editing the appropriate profile), then chalk insertion
operations will attempt to run the tool, even downloading it, if
needed, from its official distribution source (via Python's pip, which
you will need locally for this to work).

You may also set the field yourself if you have other tooling for
collecting this information.
"""
}

keyspec ERR_INFO {
    kind:             ChalkTimeArtifact
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    normalized_order: high() - 500
    shortdoc: "Errors collected during chalk time"
    doc:              """
This can capture any errors or other logging information reported
during the chalk insertion process. The errors are filtered based on
log level.

Only messages of a log level at least as severe as that found in the
configuration variable `chalk_log_level` are capture. By default, this
value is set to "error".

That configuration variable is independent from the `log_level`
variable that controls console logging output.
"""
}

keyspec SIGNING {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             bool
    standard:         true
    system:           true
    since:            "0.1.0"
    normalized_order: high() - 400
    shortdoc:         "Indicator that a chalk mark has been signed"
    doc:              """
This key must be added into chalk marks whenever chalk marks are being
digitally signed, to help ensure that it's possible to detect deleted
signatures.

It also generally does NOT need to be reported. If this field isn't
reported, and an attacker attempts to delete a signature, they could
remove this field. However, the (required when signing)
`METADATA_HASH` field will NOT validate if this field is deleted.
"""
}

keyspec METADATA_HASH {
    kind:                   ChalkTimeArtifact
    never_early:            true
    type:                   string
    standard:               true
    system:                 true
    since:                  "0.1.0"
    normalized_order:       high() - 300
    shortdoc:         "Hash of normalized Chalk mark metadata"
    doc:            """
This field is used to help authenticate the rest of the metadata
placed into the chalk mark. It constitutes a hash of all the metadata
that is in the actual chalk mark.

Again, this is NOT derived from the insertion-time report; instead, it
is derived from the remainder chalk mark itself. That way, whenever
the chalk mark is extracted, the contents can be validated, thus
detecting whether software has been changed since marked.

For instance, if you mark a shell script, and then edit it, you will
get a validation error on any subsequent operation involving that
artifact until a new mark is inserted, the changes are reverted, or
the mark is deleted.

We use a simple binary normalization format for the hash, which sorts
keys in a well-known order. `METADATA_ID` isn't used in this
computation since it is derived from the `METADATA_HASH`, and
signature-related fields are not used, since they sign this value.

Whenever available at chalk time, the `HASH` field should be added to
artifacts (or the `CHALK_ID`, which would be derived from the same
value), in which case the `METADATA_HASH` protects the integrity of
the entire artifact, not just the associated metadata.

The `METADATA_ID` field is derived from the `METADATA_HASH` value, but
is more human-readable. It can also be used for metadata integrity,
which is why this field is not strictly required in a chalk mark.
"""
}

keyspec METADATA_ID {
    required_in_chalk_mark: true
    kind:                   ChalkTimeArtifact
    never_early:            true
    type:                   string
    standard:               true
    system:                 true
    since:                  "0.1.0"
    normalized_order:       high() - 200
    shortdoc:         "Unique ID for marked software artifact"
    doc:              """
This is a more readable unique identifier for a chalked artifact. It
is always derived from 100 bits of the artifact's `METADATA_HASH`
field, and is encoded in the same way the `CHALK_ID` key is.
"""
}

keyspec SIGNATURE {
    kind:             ChalkTimeArtifact
    never_early:      true
    type:             dict[string, string]
    standard:         true
    system:           true
    since:            "0.1.0"
    normalized_order: high()
    shortdoc:         "Digital signature of the chalk mark"
    doc:              """
Embedded digital signature for artifact. Note that this is only
supported for file system artifacts; containers and images use
detached signatures only.

Signatures are generated using the In-Toto standard.
"""
}

keyspec DOCKER_FILE {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.1.0"
    shortdoc: "Docker file contents pre-chalk"
    doc: """
When chalking docker containers, this gets the contents of the topmost
docker file passed to the docker command line, prior to any chalking.
"""
}

keyspec DOCKER_FILE_CHALKED {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.4.0"
    shortdoc: "Updated Docker file contents post-chalk"
    doc: """
Full content of the dockerfile as it is built including all
chalk additions added to it.
"""
}

keyspec DOCKERFILE_PATH {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.1.0"
    shortdoc: "Platform passed to docker build"
    doc: """
Platform passed when performing `docker build`, if any.
"""
}

keyspec DOCKER_PLATFORM {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.1.0"
    doc: """
Platform for the built image. For multi-platform builds, each platform
will report its own separate chalkmark which will have appropriate
`DOCKER_PLATFORM`.
"""
}

keyspec DOCKER_PLATFORMS {
    kind:             ChalkTimeArtifact
    type:             list[string]
    standard:         true
    system:           false
    since:            "0.4.0"
    doc: """
All platforms passed when performing 'docker build', if any.
"""
}

keyspec DOCKER_LABELS {
    kind:              ChalkTimeArtifact
    type:              dict[string, string]
    standard:          true
    system:            false
    since:             "0.1.0"
    shortdoc: "Labels added to docker image during build process"
    doc: """
Labels added to a docker image during the build process, if any.
"""
}

keyspec DOCKER_TAGS {
    kind:              ChalkTimeArtifact
    type:              list[string]
    standard:          true
    system:            false
    since:             "0.1.0"
    shortdoc: "Chalk-time image tags"
    doc: """
Tags added to a docker image. Will be in the form: REPOSITORY:TAG
"""
}

keyspec DOCKER_CONTEXT {
    kind:              ChalkTimeArtifact
    type:              string
    standard:          true
    system:            false
    since:             "0.1.0"
    shortdoc: "Context for container build"
    doc: """
The docker context used when building a container.
"""
}

keyspec DOCKER_ADDITIONAL_CONTEXTS {
    kind:              ChalkTimeArtifact
    type:              dict[string, string]
    standard:          true
    system:            false
    since:             "0.1.0"
    doc: """
Additional contexts specified when building a container.
"""
}

keyspec DOCKER_CHALK_ADDED_LABELS {
    kind:              ChalkTimeArtifact
    type:              dict[string, string]
    standard:          true
    system:            false
    since:             "0.1.0"
    doc: """
List of labels programmatically added by Chalk.
"""
}

keyspec DOCKER_CHALK_ADDED_TO_DOCKERFILE {
    kind:              ChalkTimeArtifact
    type:              list[string]
    standard:          true
    system:            false
    since:             "0.1.0"
    doc: """
Additional instructions added to the passed dockerfile.
"""
}

keyspec DOCKER_BASE_IMAGE {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.4.0"
    doc: """
Name of the base image specified in Dockerfile used to build docker image.
Note this only specifies the base image of the final build target.
"""
}

keyspec DOCKER_BASE_IMAGE_REPO {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.4.0"
    doc: """
Only registry repository of the base image specified in Dockerfile used to build docker image.
Note this only specifies the base image of the final build target.
"""
}

keyspec DOCKER_BASE_IMAGE_TAG {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.4.0"
    doc: """
Only registry tag of the base image if specified in Dockerfile used to build docker image.
Note this only specifies the base image of the final build target.
"""
}

keyspec DOCKER_BASE_IMAGE_DIGEST {
    kind:             ChalkTimeArtifact
    type:             string
    standard:         true
    system:           false
    since:            "0.4.0"
    doc: """
Only registry digest of the base image if specified in Dockerfile used to build docker image.
Note this only specifies the base image of the final build target.
"""
}

keyspec _DOCKER_CLIENT_VERSION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Docker client version"
    doc:              "Docker CLI client version"
}

keyspec _DOCKER_SERVER_VERSION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Docker server version"
    doc:              "Docker daemon server version"
}

keyspec _DOCKER_BUILDX_VERSION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Docker buildx version"
    doc:              "Docker buildx version"
}

keyspec _DOCKER_INFO {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Docker info output"
    doc:              "Docker info output"
}

keyspec _DOCKER_BUILDER_BUILDKIT_VERSION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Docker buildkit version of the builder"
    doc:              "Docker buildkit version of the builder"
}

keyspec _DOCKER_BUILDER_INFO {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Docker buildx inspect output of the builder"
    doc:              "Docker buildx inspect output of the builder"
}

keyspec _OP_ARTIFACT_TYPE {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    codec:            true
    since:            "0.1.0"
    shortdoc:         "Type of the artifact when the operation ran"
    doc : """
A string indicating the type of a software artifact, as determined at
the time a report was generated. The possible values are identical to
those listed in the documentation for the chalk-time key,
`ARTIFACT_TYPE`.

During insertion operations, this key is redundant with
`ARTIFACT_TYPE`, so there is generally no reason to report on both of
these at insertion time.
"""
}

keyspec _OP_ARTIFACT_PATH {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Path software was found during the current operation"
    doc:              """
The file system location (or alternate location information if not
file-system based) for a given artifact, in the environment local for
the current operation. For instance, if running a `chalk extract`
operation or a `chalk exec` operation, this value will represent where
software is at the time, which likely will not match the path captured
during the build process (which lives in the `PATH_WHEN_CHALKED` key).

However, on insertion operations, this field is redundant with
`PATH_WHEN_CHALKED`, except that it cannot be added to a chalk mark.
"""
}

keyspec _CURRENT_HASH {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    codec:            true
    since:            "0.1.0"
    shortdoc: "SHA-256 hash at the end of the current operation"
    doc:              """
This field contains the SHA-256 hash of a software artifact, as
calculated by its codec, at the end of the current chalk operation,
whatever it is.

On insertion operations, this will capture the post-chalking hash
value, and thus will generally be different than the value of the
`HASH` key.

For extraction and exec operations, since they do not modify the
artifact, this will represent the same post-chalked artifact hash,
except in cases where the artifact isn't chalked, naturally.
"""

}

keyspec _VALIDATED_METADATA {
    kind:             RunTimeArtifact
    type:             bool
    standard:         true
    system:           true
    since:            "0.1.0"
    doc:              """
This is set to `true` if an object's metadata is okay, and the chalk
mark was well-formed. If an object is unsigned, this being `true` does
NOT mean that the metadata is authentic, just that the data is all
consistent.  If there is also a validated signature as well,
_VALIDATED_SIGNATURE will also be true.
"""
}

keyspec _VALIDATED_SIGNATURE {
    kind:             RunTimeArtifact
    type:             bool
    standard:         true
    system:           true
    since:            "0.1.0"
    doc:              """
This is set to true if a signature is both present and validated in an
artifact.

If, for some reason, there is a signature but we could not validate
(e.g., the public key is not available), then this will be set to
`false`.

However, this doesn't indicate tampering; in the case of a failed
validation, this key is omitted, and `_INVALID_SIGNATURE` will be
`true`.
"""
}

keyspec _VIRTUAL {
    kind:             RunTimeArtifact
    type:             bool
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Whether 'virtual' chalk was used during an insertion op"
    doc:              """
This reporting field indicates that a chalk mark was created for a
given artifact, but that the mark was NOT inserted into the artifact
(ideally, it would have instead been escrowed somewhere easy to
track).

Despite the fact that this key cannot be inserted into a chalk mark,
it is only ever set when performing chalking operations.
"""
}

keyspec _OP_CHALKED_KEYS {
    kind:             RunTimeArtifact
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "List of keys added to chalk mark; insertion ops only"
    doc:              """
Collected for `chalk insert` operations only, a list of all keys that
were added to the chalk mark. This only consists of the names of the
keys chalked, not any of the values.
"""
}

keyspec _OP_ARTIFACT_REPORT_KEYS {
    kind:             RunTimeArtifact
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Artifact specific keys used in primary report; insertion only"
    doc:              """
Collected for `chalk insert` operations only, a list of all _artifact
specific_ key names that will reported on in the primary operation
report. This is primarily intended for auxiliary (custom) reports
where the full contents are not being duplicated.
"""
}

keyspec _PROCESS_PID {
    kind:             RunTimeArtifact
    type:             int
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Process PID for exec'd command"
    doc: """
The process ID of the running process associated with the artifact.

Currently, this is only available during a 'chalk exec' operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_DETAIL {
    kind:             RunTimeArtifact
    type:             dict[string, string]
    standard:         true
    since:            "0.1.0"
    shortdoc:         "All process detail for exec operation"
    doc: """
Collects key process info; the same info as in `_OP_ALL_PS_INFO`, but
only for the given process.

This overlaps with many of the other keys beginning with `_PROCESS`.

If you use this key, then the only such keys that do not overlap are:
``` _PROCESS_FD_INFO _PROCESS_MOUNT_INFO ``` Currently, this is only
available during a `chalk exec` operation, where Chalk has been
configured to report when spawning the container entry point.
"""
}

keyspec _PROCESS_PARENT_PID {
    kind:             RunTimeArtifact
    type:             int
    standard:         true
    since:            "0.1.0"
    shortdoc: "Process ID of parent process"
    doc: """
The process ID of the parent process.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_START_TIME {
    kind:             RunTimeArtifact
    type:             float
    standard:         true
    since:            "0.1.0"
    shortdoc: "Start time of process based on local boot time"
    doc: """
Process start time, in seconds since boot.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_UTIME {
    kind:             RunTimeArtifact
    type:             float
    standard:         true
    since:            "0.1.0"
    shortdoc: "User mode time of exec'd process since starting"
    doc: """
The amount of time the process has spent in user mode since starting,
in seconds.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_STIME {
    kind:             RunTimeArtifact
    type:             float
    standard:         true
    shortdoc: "Kernel mode time of exec'd process since starting"
    doc: """
The amount of time the process has spent in kernel mode since
starting, in seconds.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_CHILDREN_UTIME {
    kind:             RunTimeArtifact
    type:             float
    standard:         true
    since:            "0.1.0"
    shortdoc: "User mode time of exec'd process children"
    doc: """
User mode time of the proc's waited-for children.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_CHILDREN_STIME {
    kind:             RunTimeArtifact
    type:             float
    standard:         true
    since:            "0.1.0"
    shortdoc: "Kernel mode time of exec'd process children"
    doc: """
Kernel mode time of the proc's waited-for children.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_STATE {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Process state of exec'd process at time of report"
    doc: """
The state of the process (e.g, Running, Sleeping, Zombie, ...)

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_PGID {
    kind:             RunTimeArtifact
    type:             int
    standard:         true
    since:            "0.1.0"
    shortdoc: "Process group ID od exec'd process"
    doc: """
The process group associated with the process.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_UMASK {
    kind:             RunTimeArtifact
    type:             int
    standard:         true
    since:            "0.1.0"
    shortdoc: "Umask of exec'd process"
    doc: """
The umask associated with the process.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_UID {
    kind:             RunTimeArtifact
    type:             list[int]
    standard:         true
    since:            "0.1.0"
    shortdoc: "UID info for exec'd process"
    doc: """
A list containing the real, effective, saved and fs UID of the
process.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_GID {
    kind:             RunTimeArtifact
    type:             list[int]
    standard:         true
    since:            "0.1.0"
    since:            "0.1.0"
    doc: """
A list containing the real, effective, saved and fs GID of the
process.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}


keyspec _PROCESS_NUM_FD_SIZE {
    kind:             RunTimeArtifact
    type:             int
    standard:         true
    since:            "0.1.0"
    shortdoc: "Allocated file descriptors for exec'd process"
    doc: """
The number of allocated file descriptors.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_GROUPS {
    kind:             RunTimeArtifact
    type:             list[int]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Supplemental groups for exec'd process"
    doc: """
A list of the supplementary groups to which the process belongs.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_SECCOMP_STATUS {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Seccomp status of exec'd process"
    doc: """
The process' Seccomp status (`disabled`, `strict` or `filter`).

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_ARGV {
    kind:             RunTimeArtifact
    type:             list[string]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Exec'd process argv via proc"
    doc: """
The argv as reported via proc for the exec'd process we are reporting
on.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_CWD {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Exec'd process CWD"
    doc: """
The current working directory of the process.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_EXE_PATH {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Exec'd process's local path on file system"
    doc: """
The path to the executable of the process being reported on.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_COMMAND_NAME {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Name of exec'd command"
    doc: """
The current name of the process image being reported on.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _PROCESS_FD_INFO {
    kind:             RunTimeArtifact
    type:             dict[string, dict[string, string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Info on file descriptors of exec'd process"
    doc: """
Returns information for all file descriptors in the process.
Keys are file descriptor numbers, but encoded as a string.

Values are dictionaries of info that vary based on the file type.
"""
}

keyspec _PROCESS_MOUNT_INFO {
    kind:             RunTimeArtifact
    type:             list[list[string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Mount info reported for exec'd process"
    doc: """
A list of mounts available to the process.

Currently, this is only available during a `chalk exec` operation,
where Chalk has been configured to report when spawning the container
entry point.
"""
}

keyspec _OP_ALL_IMAGE_METADATA {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    shortdoc:         "Reported metadata from image inspect"
    doc: """
All reported metadata for am image as examined, in JSON format. With
docker, this is equivalent to running `docker inspect` on the image.
"""
}

keyspec _OP_ALL_CONTAINER_METADATA {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    shortdoc:         "Reported metadata from running container inspect"
    doc: """
All reported metadata for the running container, as reported by the
container runtime, in JSON format. With docker, this is equivalent to
running `docker inspect` on a running container.
"""
}

keyspec _IMAGE_ID {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    since:    "0.1.0"
    shortdoc: "Reported image ID for the image or container"
    doc: """
The image ID reported by docker for an image or a container.
Image ID is the digest of the image config json object.
"""
}

keyspec _IMAGE_DIGEST {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    since:    "0.4.0"
    shortdoc: "Reported digest of the image manifest"
    doc: """
The image digest reported by docker for an image.
This is the digest of the image manifest as its referenced in
the registry.

This key assumes registry v2 spec which guarantees digest is
the same across different registries.
"""
}

keyspec _IMAGE_LIST_DIGEST {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    since:    "0.4.0"
    shortdoc: "Reported digest of the image manifest"
    doc: """
The manifest list digest for an image.
This is only reported for images which built manifest list
such as multi-platform builds or buildx builds which pushed
additional metadata to the registry such as `--provenance`.
This digest can be used to lookup that metdata back from the
registry.

This key assumes registry v2 spec which guarantees digest is
the same across different registries.
"""
}

keyspec _IMAGE_COMMENT {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Comment reported for a container image"
    doc: """
Optional comment that was set when committing or importing the image locally.

This does not apply for remote images.
"""
}

keyspec _IMAGE_CREATION_DATETIME {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Reported creation date and time for a container image"
    doc: """
The DATETIME formatted string for the reported container image
creation time.
"""
}

keyspec _IMAGE_DOCKER_VERSION {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
Docker version used to built the image
"""
}

keyspec _IMAGE_AUTHOR {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The author of the image (see LABEL maintainer)
"""
}

keyspec _IMAGE_ARCHITECTURE {
    kind: RunTimeArtifact
    type: string
    standard: true
    shortdoc: "Architecture reported for a container image"
    doc: """
The reported architecture that the image was built for, for example `amd64` or `ppc64le`.
"""
}

keyspec _IMAGE_VARIANT {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
Specifies a variant of the CPU, for example `armv6l` to specify a particular CPU variant of the ARM CPU.
"""
}

keyspec _IMAGE_OS {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "OS for which a container image was built"
    doc: """
Linux. The answer is linux.
"""
}

keyspec _IMAGE_OS_VERSION {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
Specifies the operating system version, for example 10.0.10586.
"""
}

# FIXME https://docs.docker.com/registry/spec/manifest-v2-2/
#keyspec _IMAGE_OS_FEATURES {
#    kind: RunTimeArtifact
#    type: list[string]
#    standard: true
#    doc: """
#Specifies an array of strings, each listing a required OS feature (for example on Windows win32k)
#"""
#}

keyspec _IMAGE_SIZE {
    kind:     RunTimeArtifact
    type:     int
    standard: true
    shortdoc: "Size of container image"
    doc: """
The size in bytes of the image as it is stored locally. This field exists so that a client will have an expected size for the content before validating. If the length of the retrieved content does not match the specified length, the content should not be trusted.
"""
}

keyspec _IMAGE_COMPRESSED_SIZE {
    kind:     RunTimeArtifact
    type:     int
    standard: true
    shortdoc: "Size of compressed container image in a registry"
    doc: """
The size in bytes of the compressed image as it is stored in the registry.
"""
}

keyspec _IMAGE_ROOT_FS_TYPE {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The type of the image's root filesystem
"""
}

keyspec _IMAGE_ROOT_FS_LAYERS {
    kind:     RunTimeArtifact
    type:     list[string]
    standard: true
    doc: """
The layer IDs of the image's root filesystem
"""
}

keyspec _IMAGE_HOSTNAME {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The hostname a container uses for itself.
"""
}

keyspec _IMAGE_DOMAINNAME {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The domain name of the image.
"""
}

keyspec _IMAGE_USER {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
User associated with the image.
"""
}

keyspec _IMAGE_EXPOSED_PORTS {
    kind:     RunTimeArtifact
    type:     dict[string, dict[string, `x]]
    standard: true
    shortdoc: "Exposed ports allowed for container instance"
    doc: """
Explicitly configured ports that instances of the image may bind to on
external interfaces. The keys will be of the form 'port/family', e.g.,
`446/tcp`. The values are info about specific interfaces where those
ports are bound, if provided. Otherwise, it's expected to be across
all interfaces.
"""
}

keyspec _IMAGE_ENV {
    kind:     RunTimeArtifact
    type:     list[string]
    standard: true
    doc: """
The environment configuration of an image.
"""
}

keyspec _IMAGE_CMD {
    kind:     RunTimeArtifact
    type:     list[string]
    standard: true
    doc: """
The default CMD of an image with its arguments.
"""
}

keyspec _IMAGE_NAME {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Reported image name for a container instance"
    doc: """
The image name associated with a container, as reported by the
runtime.
"""
}

keyspec _IMAGE_HEALTHCHECK_TEST {
    kind:     RunTimeArtifact
    type:     list[string]
    standard: true
    doc: """
Healthcheck command to be run to determine health status.
"""
}

keyspec _IMAGE_HEALTHCHECK_INTERVAL {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
Interval by which to run the healthcheck command.
"""
}

keyspec _IMAGE_HEALTHCHECK_TIMEOUT {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
Timeout after which the healthcheck is considered failed/unhealthy if not OK.
"""
}

keyspec _IMAGE_HEALTHCHECK_START_PERIOD {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
Healthcheck start period provides initialization time for containers that need time to bootstrap.
Probe failure during that period will not be counted towards the maximum number of retries.
"""
}

keyspec _IMAGE_HEALTHCHECK_START_INTERVAL {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The time between health checks during the container start period.
"""
}

keyspec _IMAGE_HEALTHCHECK_RETRIES {
    kind:     RunTimeArtifact
    type:     int
    standard: true
    doc: """
How many time to attempt to retry the healthcheck before considering it failed.
"""
}

keyspec _IMAGE_MOUNTS {
    kind:     RunTimeArtifact
    type:     dict[string, `x]
    standard: true
    doc: """
Different types of mounts (e.g., cache, bind) of an image
"""
}

keyspec _IMAGE_WORKINGDIR {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The WORKDIR instruction switches to a specific directory in the Docker image, like the application code directory, to make it easier to reference files in subsequent instructions.
"""
}

keyspec _IMAGE_ENTRYPOINT {
    kind:     RunTimeArtifact
    type:     list[string]
    standard: true
    shortdoc: "Reported entrypoint for a container image"
    doc: """
The path to the command within the contained file system, relative to
the root of the environment.
"""
}

keyspec _IMAGE_NETWORK_DISABLED {
    kind:     RunTimeArtifact
    type:     bool
    standard: true
    doc: """
Whether the networking stack of a container is isolated or not
"""
}

keyspec _IMAGE_MAC_ADDR {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The set MAC address for a container
"""
}

keyspec _IMAGE_ONBUILD {
    kind:     RunTimeArtifact
    type:     list[string]
    standard: true
    doc: """
The ONBUILD instruction which adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build.
"""
}

keyspec _IMAGE_LABELS {
    kind:     RunTimeArtifact
    type:     dict[string, string]
    standard: true
    doc: """
Key-value pairs adding metadata to images
"""
}

keyspec _IMAGE_STOP_SIGNAL {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The signal to be sent to the main process inside the container, which by default is SIGTERM
"""
}

keyspec _IMAGE_STOP_TIMEOUT {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The timeout, which is 10 seconds by default for each container to stop. If even one of your containers does not respond to SIGTERM signals, Docker will wait for 10 seconds at least.
"""
}

keyspec _IMAGE_SHELL {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: """
The shell used within an image (e.g., `/bin/sh`) used to execute ENTRYPOINT, RUN and/or CMD commands
"""
}

keyspec _IMAGE_PROVENANCE {
    kind:     RunTimeArtifact
    type:     `x
    standard: true
    since:    "0.4.0"
    shortdoc: "Docker image provenance information"
    doc: """
Docker SLSA provenance information created with `docker build --provenance=true`.
"""
}

keyspec _IMAGE_SBOM {
    kind:     RunTimeArtifact
    type:     `x
    standard: true
    since:    "0.4.0"
    shortdoc: "Docker image SBOM information"
    doc: """
Docker SPDX SBOM information created with `docker build --sbom=true`.
"""
}

keyspec _STORE_URI {
    kind:                RunTimeArtifact
    type:                string
    standard:            true
    since:               "0.1.0"
    apply_substitutions: true
    doc:                 """
URI where an artifact is none to have been stored, generally as a part
of the current operation.
"""
}


keyspec _INSTANCE_CONTAINER_ID {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    doc: """
Any reported instance ID, such as the container ID for a running
container.
"""
}

keyspec _INSTANCE_CREATION_DATETIME {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    doc: """
The DATETIME formatted string for the reported container creation
time.
"""
}

keyspec _INSTANCE_ENTRYPOINT_PATH {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    doc: """
The path to the command, if running in a containerized / virtual
environment.  The path is relative to the root of the environment.
"""
}

keyspec _INSTANCE_ENTRYPOINT_ARGS {
    kind:             RunTimeArtifact
    type:             list[string]
    standard:         true
    shortdoc: "Reported arguments passed to a container instance"
    doc: """
The arguments used when starting the instance.
"""
}

keyspec _INSTANCE_ENV {
    kind:             RunTimeArtifact
    type:             list[string]
    standard:         true
    shortdoc: "Reported environment variables for a container instance"
    doc: """
Environment variables made available to the instance, in VAR=value
format.
"""
}

keyspec _INSTANCE_RESOLVE_CONF_PATH {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: "Configuration path for DNS settings of the instance"
}

keyspec _INSTANCE_HOSTNAME_PATH {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: "Configuration path for hostname settings of the instance"
}

keyspec _INSTANCE_HOSTS_PATH {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: "Configuration path for hosts settings of the instance"
}

keyspec _INSTANCE_LOG_PATH {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    doc: "Path for storing logs for instance execution"
}

keyspec _INSTANCE_IMAGE_ID {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Reported _image_ ID for a container instance"
    doc: """
The image ID associated with the instance, as a hash. Will generally
be lower-case ASCII prefixed with the string `sha256:`
"""
}

keyspec _INSTANCE_STATUS {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Reported status info for a container instance"
    doc: """
The status of a container or virtual instance (running, paused,
stopped, etc) as reported by the container runtime.
"""
}

keyspec _INSTANCE_PID {
    kind:     RunTimeArtifact
    type:     int
    standard: true
    shortdoc: "Reported pid for container instance"
    doc: """
The process ID of the instance as reported by the container
runtime. This will generally be the actual PID, not a virtualized PID.
"""
}

keyspec _INSTANCE_NAME {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Reported container instance name"
    doc: """
The name this container instance has been given by the container
runtime.
"""
}

keyspec _INSTANCE_RESTART_COUNT {
    kind:     RunTimeArtifact
    type:     int
    standard: true
    shortdoc: "Reported instance restart count"
    doc: """
The number of restarts the runtime reports associated with the
container.
"""
}

keyspec _INSTANCE_DRIVER {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    doc: "The instance driver (e.g., docker container driver, buildx) used, as reported by the runtime."
}

keyspec _INSTANCE_PLATFORM {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Reported platform of container instance"
    doc: """
Platform of an instance, as reported by the runtime.
"""
}

keyspec _INSTANCE_MOUNT_LABEL {
    kind:     RunTimeArtifact
    type:     string
    standard: true
    shortdoc: "Reported mount labels for an instance"
    doc: """
Mounts labels associated with the running container.
"""
}

keyspec _INSTANCE_PROCESS_LABEL {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    doc: """
Process label for a running instance.
"""
}

keyspec _INSTANCE_APP_ARMOR_PROFILE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: """
Any AppArmor profile enabled for the instance.
"""
}

keyspec _INSTANCE_EXEC_IDS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: """
Instance execution ids as captured at runtime..
"""
}

keyspec _INSTANCE_BINDS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: """
Binds specified for a running instance.
"""
}

keyspec _INSTANCE_CONTAINER_ID_FILE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: """
An instance's container ID file
"""
}

keyspec _INSTANCE_LOG_CONFIG {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: """
Log configuration for a running instance.
"""
}

keyspec _INSTANCE_NETWORK_MODE {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    doc: """
Network mode for a running instance.
"""
}

keyspec _INSTANCE_RESTART_POLICY_NAME {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Name of the restart policy for the running instance."
}

keyspec _INSTANCE_RESTART_RETRY_COUNT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "An instance's restart retry count."
}

keyspec _INSTANCE_AUTOREMOVE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Whether the container should be getting removed after its stopped"
}

keyspec _INSTANCE_VOLUME_DRIVER {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Volume driver information (e.g., vieux/sshfs driver info) related to a running instance"
}

keyspec _INSTANCE_VOLUMES_FROM {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Mount an instance's volume from another container as described in this option"
}

keyspec _INSTANCE_CONSOLE_SIZE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "An instance's console size"
}


keyspec _INSTANCE_ADDED_CAPS {
    kind: RunTimeArtifact
    type: list[string]
    standard: true
    shortdoc: "Reported capabilities added to container instance"
    doc: """
Capabilities explicitly added to an instance.
"""
}

keyspec _INSTANCE_DROPPED_CAPS {
    kind: RunTimeArtifact
    type: list[string]
    standard: true
    shortdoc: "Reported capabilities dropped from container instance"
    doc: """
Capabilities explicitly dropped from an instance.
"""
}

keyspec _INSTANCE_CGROUP_NS_MODE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Cgroup namespace mode of an instance"
}

keyspec _INSTANCE_DNS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "DNS settings for an instance"
}

keyspec _INSTANCE_DNS_OPTIONS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "DNS options configured for the instance"
}

keyspec _INSTANCE_DNS_SEARCH {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "DNS search configuration for an instance."
}

keyspec _INSTANCE_EXTRA_HOSTS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Additional hosts to be looked up when there are network or DNS issues"
}

keyspec _INSTANCE_GROUP_ADD {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: ""
}

keyspec _INSTANCE_IPC_MODE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "IPC mode of an instance"
}

keyspec _INSTANCE_CGROUP {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    shortdoc: "Reported cgroup for container instance"
    doc: """
CGroup associated with the instance, as reported by the container
runtime
"""
}

keyspec _INSTANCE_LINKS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: """
Links of a running instance (legacy):
The link feature allows containers to discover each other and securely transfer information about one container to another container"
"""
}

# https://docs.docker.com/engine/reference/run/#runtime-constraints-on-resources
keyspec _INSTANCE_OOM_SCORE_ADJ {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Running instance's OOM preferences (-1000 to 1000)"
}

keyspec _INSTANCE_PID_MODE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: """
The PID mode of the container (e.g. "host")
"""
}

keyspec _INSTANCE_IS_PRIVILEGED {
    kind: RunTimeArtifact
    type: bool
    standard: true
    shortdoc: "Reported priv status for container instance"
    doc: """
Whether or not the workload is running with admin privileges on the
underlying node.
"""
}

keyspec _INSTANCE_PUBLISH_ALL_PORTS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Whether the instance publishes all exposed ports to the host interfaces"
}

keyspec _INSTANCE_READONLY_ROOT_FS {
    kind:             RunTimeArtifact
    type:             bool
    standard:         true
        doc: """
Whether the root file system is immutable.  Note that this does not
preclude filesystem mounts that allow writing.
"""
}

keyspec _INSTANCE_SECURITY_OPT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Security options for the running instance."
}

keyspec _INSTANCE_UTS_MODE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "UTS namespace mode for the running instance."
}

keyspec _INSTANCE_USER_NS_MODE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "User namespace mode for the running instance."
}

keyspec _INSTANCE_SHM_SIZE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Size of /dev/shm for the running instance. The format is <number><unit>"
}

keyspec _INSTANCE_RUNTIME {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    shortdoc: "Reported container runtime"
    doc: """
The container runtime associated with the instance.
"""
}

keyspec _INSTANCE_ISOLATION {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    shortdoc: "Reported isolation technology for container instance"
    doc: """
Isolation technology in use for the instance, if reported by the
container runtime.
"""
}

# https://docs.docker.com/config/containers/resource_constraints/
keyspec _INSTANCE_CPU_SHARES {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "A value greater or less than the default of 1024, increases or reduces the instances's weight, and gives it access to a greater or lesser proportion of the host machine's CPU cycles"
}

keyspec _INSTANCE_MEMORY {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Memory allocated to the running instance"
}

keyspec _INSTANCE_NANO_CPUS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's NanoCpus that represents CPU quota in units of 10-9 CPUs."
}

keyspec _INSTANCE_CGROUP_PARENT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Optional parent cgroup for the running instance"
}

keyspec _INSTANCE_BLOCKIO_WEIGHT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's block IO weight (relative weight). Accepts a weight value between 10 and 1000."
}

keyspec _INSTANCE_BLOCKIO_WEIGHT_DEVICE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance' block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)"
}

keyspec _INSTANCE_BLOCKIO_DEVICE_READ_BPS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit on read rate from a device (format: <device-path>:<number>[<unit>]). Number is a positive integer. Unit can be one of kb, mb, or gb"
}

keyspec _INSTANCE_BLOCKIO_DEVICE_WRITE_BPS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit on write rate to a device (format: <device-path>:<number>[<unit>]). Number is a positive integer. Unit can be one of kb, mb, or gb.on "
}

keyspec _INSTANCE_BLOCKIO_DEVICE_READ_IOPS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit read rate (IO per second) from a device (format: <device-path>:<number>). Number is a positive integer."
}

keyspec _INSTANCE_BLOCKIO_DEVICE_WRITE_IOPS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit on write rate (IO per second) to a device (format: <device-path>:<number>). Number is a positive integer."
}

keyspec _INSTANCE_CPU_PERIOD {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit on the CPU CFS (Completely Fair Scheduler) period"
}

keyspec _INSTANCE_CPU_QUOTA {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit the CPU CFS (Completely Fair Scheduler) quota"
}

keyspec _INSTANCE_CPU_REALTIME_PERIOD {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit on the CPU real-time period. In microseconds. Requires parent cgroups be set and cannot be higher than parent. Also check rtprio ulimits."
}

keyspec _INSTANCE_CPU_REALTIME_RUNTIME {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's limit on the CPU real-time runtime. In microseconds. Requires parent cgroups be set and cannot be higher than parent. Also check rtprio ulimits."
}

keyspec _INSTANCE_CPUSET_CPUS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's CPUs in which to allow execution (0-3, 0,1)"
}

keyspec _INSTANCE_CPUSET_MEMS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems."
}

keyspec _INSTANCE_DEVICES {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's devices."
}

keyspec _INSTANCE_CGROUP_RULES {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's cgroup rules."
}

keyspec _INSTANCE_DEVICE_REQUESTS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's device requests."
}

keyspec _INSTANCE_MEMORY_RESERVATION {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "The platform must guarantee the container can allocate at least the configured amount of memory"
}

keyspec _INSTANCE_MEMORY_SWAP {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "The amount of memory this container is allowed to swap to disk"
}

keyspec _INSTANCE_MEMORY_SWAPPINESS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Setting from 0 to 100 tuning the percentage of anonymous pages used by a running container instance that the host kernel can swap out."
}

keyspec _INSTANCE_OOM_KILL_DISABLE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Whether the out of memory kill is disabled for the running instance."
}

keyspec _INSTANCE_PIDS_LIMIT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "The limit of an instance's PIDs. -1 denotes unlimited PIDs."
}

keyspec _INSTANCE_ULIMITS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "ulimit settings for the running instance."
}

keyspec _INSTANCE_CPU_COUNT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "CPU count for the running instance."
}

keyspec _INSTANCE_CPU_PERCENT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Percentage of CPU for the running instance"
}

keyspec _INSTANCE_IO_MAX_IOPS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "IO max IOPS setting for the running instance"
}

keyspec _INSTANCE_IO_MAX_BPS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "IO max BPS for the running instance"
}

keyspec _INSTANCE_MASKED_PATHS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Paths that are masked for the running instance, as they are not safe to mount inside the running instance."
}

keyspec _INSTANCE_READONLY_PATHS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Paths that are read-only for the running instance."
}

keyspec _INSTANCE_STORAGE_METADATA {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Storage metadata for the running instance."
}

keyspec _INSTANCE_MOUNTS {
    kind:             RunTimeArtifact
    type:             list[dict[string, `x]]
    standard:         true
    doc: """
Mounts associated with the running container.
"""
}

keyspec _INSTANCE_HOSTNAME {
    kind: RunTimeArtifact
    type: string
    standard: true
    shortdoc: "Reported container hostname"
    doc: """
The hostname of the instance, if reported by the container runtime.
"""
}

keyspec _INSTANCE_DOMAINNAME {
    kind: RunTimeArtifact
    type: string
    standard: true
    shortdoc: "Reported container domainname"
    doc: """
The domain name of the instance, if any.
"""
}

keyspec _INSTANCE_USER {
    kind: RunTimeArtifact
    type: string
    standard: true
    shortdoc: "Reported container userid info"
    doc: """
The user reported by the runtime, if any.
"""
}


keyspec _INSTANCE_ATTACH_STDIN {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Wether stdin is attached to a running instance, so it can be used within chained pipe commands."
}

keyspec _INSTANCE_ATTACH_STDOUT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Wether stdout is attached to a running instance, so it can be used within chained pipe commands."
}

keyspec _INSTANCE_ATTACH_STDERR {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Wether stderr is attached to a running instance, so it can be used within chained pipe commands."
}

keyspec _INSTANCE_EXPOSED_PORTS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    shortdoc: "Exposed ports for container instance"
    doc: """
Information on exposed ports from the runtime. The keys will be of the
form 'port/family', e.g., `446/tcp`. The values are info about
specific interfaces where those ports are bound, if
provided. Otherwise, it's expected to be across all interfaces.
"""
}

keyspec _INSTANCE_HAS_TTY {
    kind:             RunTimeArtifact
    type:             bool
    standard:         true
    shortdoc: "Whether container is using a tty"
    doc: """
Whether the instance is using a TTY.
"""
}

keyspec _INSTANCE_OPEN_STDIN {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's stdin open status"
}

keyspec _INSTANCE_STDIN_ONCE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Whether the container runtime should close the stdin channel after it has been opened by a single attach."
}

keyspec _INSTANCE_CMD {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's CMD"
}

keyspec _INSTANCE_CONFIG_IMAGE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's config image"
}

keyspec _INSTANCE_VOLUMES {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance volumes"
}

keyspec _INSTANCE_WORKING_DIR {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "WORKDIR of a running instance"
}

keyspec _INSTANCE_ENTRYPOINT {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance's entrypoint directive"
}

keyspec _INSTANCE_ONBUILD {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance on build directive"
}

keyspec _INSTANCE_LABELS {
    kind:             RunTimeArtifact
    type:             dict[string, string]
    standard:         true
    shortdoc: "Labels attached to container instance"
    doc: """
Reported labels attached to the instance.
"""
}

keyspec _INSTANCE_BRIDGE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance bridge setting"
}

keyspec _INSTANCE_SANDBOXID {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance sandbox id"
}

keyspec _INSTANCE_HAIRPINMODE {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "HairpinMode of an instance"
}

keyspec _INSTANCE_LOCAL_IPV6 {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance local IPv6"
}

keyspec _INSTANCE_LOCAL_IPV6_PREFIX_LEN {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance local IPv6 prefix length"
}

keyspec _INSTANCE_BOUND_PORTS {
    kind:             RunTimeArtifact
    type:             dict[string, dict[string, `x]]
    standard:         true
    doc: """
Information on bound ports from the runtime.  The keys will be of the
form 'port/family', e.g., 446/tcp'.  The values are info about
specific interfaces where those ports are bound, if provided.
Otherwise, it's expected to be across all interfaces.
"""
}

keyspec _INSTANCE_SANDBOX_KEY {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Instance sandbox key"
}

keyspec _INSTANCE_SECONDARY_IPS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "An instance's secondary IPs"
}

keyspec _INSTANCE_SECONDARY_IPV6_ADDRS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "An instance's secondary IPv6 addresses"
}

keyspec _INSTANCE_ENDPOINTID {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "An instance's endpoint id"
}

keyspec _INSTANCE_GATEWAY {
    kind: RunTimeArtifact
    type: string
    standard: true
    shortdoc: "Network gateway (v4) for container instance"
    doc: """
The network gateway used by the instance.
"""
}

keyspec _INSTANCE_GLOBAL_IPV6_ADDRESS {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    shortdoc: "IPv6 address for instance"
    doc: """
The externally bound IPv6 address for a container instance.
"""
}

keyspec _INSTANCE_GLOBAL_IPV6_PREFIX_LEN {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "An instance's global IPv6 prefix length."
}

keyspec _INSTANCE_IP {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    shortdoc: "Primary IP for container instance"
    doc: """
The primary IPv4 address for the instance.
"""
}

keyspec _INSTANCE_IP_PREFIX_LEN {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "An instance's IP prefix length."
}

keyspec _INSTANCE_IPV6_GATEWAY {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    doc: """
The network gateway used by the instance for IPv6 traffic, if any.
"""
}

keyspec _INSTANCE_MAC {
    kind:             RunTimeArtifact
    type:             string
    standard:         true
    shortdoc: "MAC address for container instance"
    doc: """
The MAC address associated with the instance's primary network
instance.
"""
}

keyspec _INSTANCE_NETWORKS {
    kind:             RunTimeArtifact
    type:             `x
    standard:         true
    doc: "Networks for a running instance."
}

keyspec _REPO_TAGS {
    kind:             RunTimeArtifact
    type:             list[string]
    standard:         true
    since:            "0.1.0"
    doc: """
When reporting on operations involving a repository (e.g., a push or
pull), any tags associated with the artifact in the operation.
"""
}

keyspec _REPO_DIGESTS {
    kind:             RunTimeArtifact
    type:             dict[string, string]
    standard:         true
    since:            "0.1.0"
    doc: """
When reporting on operations involving a repository (e.g., a push or
pull), any SHA256 digests associated with the artifact in the
operation, mapped to the associated tag.
"""
}

keyspec _FOUND_BASE_MARK {
    kind:             RunTimeArtifact
    type:             tuple[string, string]
    standard:         true
    since:            "0.1.0"
    doc: """
When extracting from a docker image that is unmarked at the top layer,
if lower layers are searched, this will be set to the found values of
CHALK_ID and METADATA_ID, in the highest layer where a mark was found.

These values will not have been validated.
"""
}

keyspec _SIGNATURES {
    kind:             RunTimeArtifact
    type:             list[dict[string, string]]
    standard:         true
    system:           true
    since:            "0.4.0"
    doc:              """
Digital signatures for artifact.  For build/push operations, this will
generally represent the digital signatures added as part of the
operation. For extraction operations, it represents a *validated*
extracted signature.

In some cases there are multiple signatures such as when pushing
docker image to multiple registries. Each registry will have a unique
signature.
"""
}

keyspec _INVALID_SIGNATURE {
    kind:             RunTimeArtifact
    type:             bool
    standard:         true
    system:           true
    since:            "0.1.0"
    doc:              """
Set to true (and is only set) if there was an attestation that
explicitly did not validate.
"""
}

keyspec _ACTION_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    ~callback:        func call_rand
    since:            "0.1.0"
    shortdoc: "Unique ID per chalk report"
    doc:              """
This is a unique identifier generated for the current run of chalk. It
is not insertable into chalk marks, but may appear in any host report.

The purpose of this value is to ensure every chalk action has a unique
identifier, if desired.

The value is a 64-bit (secure) random value, encoded as hex.

While there is a config-file callback associated with this metadata
key, it is set by the system, and cannot be overridden by the user.
"""
}

keyspec _ARGV {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    system:           true
    conf_as_system:   true
    ~callback:        func get_args
    since:            "0.1.0"
    doc:              "The full contents of argv used on invocation"
}

keyspec _ENV {
    kind:             RunTimeHost
    type:             dict[string, string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Enviornment variables during the current Chalk op"
    doc:              """
This field, which can only appear in reports, contains information
about environment variables at the time of ANY chalk invocation. For a
chalkable version, see the documentation for `INJECTOR_ENV`.

Because chalk may be used to proxy container entry points that could
contain sensitive data, we support to redacting environment variables,
including skipping them outright. The behavior is configured with the
following configuration attributes:

- **env_always_show**, a list of environment variables to show unredacted.
- **env_never_show**, a list of environment variables NOT to show in this
  report.
- **env_redact**, a list of environment variables to redact.
- **env_default_action**, a value ("show", "redact", "ignore") that
  indicates what to do for unnamed environment variables. This defaults to
  "redact".

Currently, this filtering is not handled per-report, meaning
`INJECTOR_ENV` and `_ENV` will always be identical if you attempt to
collect both at chalk time.
"""
}

keyspec _TENANT_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc: "Tenant info during the current chalk operation"
    doc:              """
Akin to `TENANT_ID_WHEN_CHALKED`, but will not be added to a chalk
mark, and can be set for any given operation. The default OSS
configuration never sets this value, but it can be configured
manually, or in binaries created by tooling.
"""
}


keyspec _OPERATION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    normalized_order: 0
    shortdoc: "Operation name for operation being reported on"
    doc:              """
This field can be provided for any chalk report, and represents the
top-level command used to invoke chalk. The value might be slightly
different from the one invoked on the command line, even though it is
often the same.

This field will always be one of the following values:

 - `insert`, created via `chalk insert`
 - `extract`, created via `chalk extract`
 - `build`, created via `chalk docker` commands that build a container.
 - `push`, created via `chalk docker` commands that push a container
   (at which point we collect data to link the build image to the pushed image).
 - `exec`, created when `chalk exec` is used to spawn a process.
 - `heartbeat`, used for subsequent reports when `chalk exec` is used.
 - `delete`, created via `chalk delete`
 - `env`, created when `chalk env` is called to create a moment-in-time report
   for a current environment.
 - `load`, created when a new configuration is inserted into a chalk binary.
 - `setup`, used for reporting on self-chalking after `chalk setup` is run.
 - `docker`, created for other (unhandled) docker commands, but not used in the
    default configuration.

These values correspond to the names used by the `outconf`
configuration section for setting up report I/O.

The `help`, `dump`, `version`, and `defaults` commands do not ever
generate reports.
"""
}

keyspec _TIMESTAMP {
    kind:             RunTimeHost
    type:             int
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order: 1
    shortdoc: "Time (as integer) associated with operation being reported on"
    doc:              """
For the current operation only, this represents the number of
milliseconds since the Unix epoch. See the documentation for the
`TIMESTAMP` key for more details.

This is collected and reported on a per-chalk-invocation basis, not on
a per-software-artifact basis. It also cannot be directly added to a
chalk mark (but can be in a report for any chalk operation).
"""
}

keyspec _DATE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order: 2
    shortdoc: "Date associated with operation being reported on"
    doc:              """
A human-readable date associated with the operation currently being
reported on. This is derived from the same value used if `_TIMESTAMP`
is reported.
"""
}

keyspec _TIME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order: 3
    shortdoc: "Time associated with operation being reported on"
    doc:              """
A human-readable string containing the time associated with the
operation currently being reported on. This is derived from the same
value used if `_TIMESTAMP` is reported.

This value is reported based on the clock and time zone of the machine
performing the chalk operation.
"""
}

keyspec _TZ_OFFSET {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    conf_as_system:   true
    since:            "0.1.0"
    normalized_order: 4
    shortdoc: "Timezone on host during operation being reported on"
    doc:              """
The Time Zone offset from UTC for the current chalk operation.
"""
}

keyspec _DATETIME {
    kind:              RunTimeHost
    type:              string
    standard:          true
    system:            true
    conf_as_system:    true
    since:             "0.1.0"
    normalized_order:  5
    shortdoc: "Date and time (as string) for operation being reported on"
    doc:               """
A full ISO-8601 Date-time w/ timezone offset for the current
operation, derived from the same value used to set the _TIMESTAMP key.
"""
}

keyspec _CHALKS {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    normalized_order: 6
    shortdoc: "Contains software artifact information for the current operation"
    doc:              """
Used to report chalks the operation worked on.

**IMPORTANT!**

Host reports using a profile that does not configure this key to
report will NOT output chalks.
"""
}

keyspec _OP_CHALK_COUNT {
    kind:             RunTimeHost
    type:             int
    standard:         true
    system:           true
    since:            "0.1.0"
    normalized_order: high() - 100
    shortdoc: "How many software artifacts are reported in _CHALKS"
    doc:              """
The number of chalks the operation worked on, meant primarily for
contexts where the chalks themselves are not being reported, such as
when reporting on aggregate stats.
"""
}

keyspec _OP_UNMARKED_COUNT {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    normalized_order: high() - 90
    shortdoc: "Unmarked software artifact count in current operation"
    doc:              """
The number of unmarked artifacts that codecs saw in the current
operation. For inserts, this number will represent the number of items
that come codec was willing to chalk, except that the configuration
indicated to ignore the file (which will frequently happen with
scripts in a `.git` directory, for instance). For non-insertion
operations, the value will represent the number of software artifacts
processed that did not contain chalk marks.
"""
}

keyspec _OP_CMD_FLAGS {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Command flags w/ values for Chalk invocation, after any processing."
    doc:              """
Fully resolved command-line flags and values used in the current chalk
command's invocation.

This is slightly different from `_ARGV` in that arguments may have
experienced some processing.
"""
}

keyspec _OP_SEARCH_PATH {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Search path for software used in the current operation"
    doc:              """
The artifact search path used for the current chalk command's attempt
to locate chalked artifacts.
"""
}

keyspec _OP_EXE_NAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Executable name for current chalk invocation"
    doc:              """
The executable name for the current chalk invocation, which is
approximately argv[0].

This key attempts to use information from the command-line invocation
of chalk, instead of system-specific information on running processes
(see `_PROCESS_COMMAND_NAME`).
"""
}

keyspec _OP_EXE_PATH {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Local path to chalk exe for current invocation"
    doc:              """
The local path to the chalk executable for the current
invocation. This generally does not include the actual exe name.

This key attempts to use information from the command-line invocation
of chalk, instead of system-specific information on running processes
(see `_PROCESS_EXE_PATH`).
"""
}

keyspec _OP_ARGV {
    kind:           RunTimeHost
    type:           list[string]
    standard:       true
    system:         true
    since:          "0.1.0"
    shortdoc: "Command-line arguments for the current Chalk op"
    doc:              """
This field contains the full contents of the command line arguments
used to invoke `chalk` for the current invocation. This field cannot
be inserted into chalk marks, but will have the same value as the
`INJECTOR_ARGV` key on any insertion operations.
"""
}

keyspec _OP_CONFIG {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Contents of user-definable external config"
    doc:              """
The contents of any user-definable configuration file used in the
current operation, if an external configuration file is used at all
(otherwise, even if requested, no value will be returned)
"""
}

keyspec _UNMARKED {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "List of unmarked artifacts for current operation"
    doc:              """
A list of artifact path information for any artifacts identified
during the current operation that were NOT marked. For insertion, this
means artifacts a codec should have processed but didn't due to
error. Otherwise, it will indicate a software artifact that the system
could have marked, but where no mark was found.
"""
}

keyspec _OP_CHALKER_COMMIT_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Repo commit ID for binary used in current operation"
    doc:              """
The commit hash of the repository used to build the chalk binary used
in the current operation.
"""
}

keyspec _OP_CHALKER_VERSION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Chalk version for Chalk binary used in current operation"
    doc:              """
Version information for the chalk command used in the current chalk
invocation.
"""
}

keyspec _OP_PLATFORM {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Platform info for current information"
    doc:              """
Platform info (os and architecture) for the current chalk invocation.
"""
}

keyspec _OP_HOSTNAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Hostname info during the current chalk invocation"
    doc:              """
 Hostname information found that is associated with the machine on
 which the current chalk command was executed.
"""
}

keyspec _OP_HOST_SYSNAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host sysname during chalk operation"
    doc:              """
On posix systems, value of `sysname` field from `uname()` syscall,
collected during current chalk operation.
"""
}

keyspec _OP_HOST_NODENAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host node during chalk operation"
    doc:              """
On posix systems, value of `nodename` field from `uname()` syscall,
collected during current chalk operation.
"""
}

keyspec _OP_HOST_RELEASE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host kernel during chalk operation"
    doc:              """
On posix systems, value of `release` field from `uname()` syscall,
collected during current chalk operation.
"""
}

keyspec _OP_HOST_VERSION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host kernel during chalk operation"
    doc:              """
On posix systems, value of `version` field from `uname()` syscall,
collected during current chalk operation.
"""
}

keyspec _OP_HOST_MACHINE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.4.0"
    shortdoc:         "Host machine during chalk operation"
    doc:              """
On posix systems, value of `machine` field from `uname()` syscall,
collected during current chalk operation.
"""
}

keyspec _OP_PUBLIC_IPV4_ADDR {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.3"
    shortdoc:         "IPv4 address"
    doc:              """
This returns the IPv4 address on the local machine used to route
external traffic. It's determined by setting up a UDP connection to
Cloudflare's public DNS service, but does not involve sending any
data.

There are other keys for reported IPs via other systems, including
cloud provider APIs, docker, procfs, etc.
"""
}


keyspec _OP_CLOUD_METADATA {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Cloud metadata during current operation"
    doc:              """
Deprecated, and only available for the simplest of AWS environments.

Instead, please use individual metadata fields for cloud provider
metadata.
"""
}

keyspec _OP_ERRORS {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc:         "Errors identified for current operation."
    doc:              """
Errors identified during the current operation, not associated with a
particular artifact. See the documentation for `ERR_INFO`, which
shares the same log-level configuration.
"""
}

keyspec _OP_HOST_REPORT_KEYS {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    system:           true
    since:            "0.1.0"
    shortdoc: "Host keys used in primary report; insertion only"
    doc:             """
Collected for `chalk insert` operations only, a list of all
_host-level_ key names that will reported on in the primary operation
report. This is primarily intended for auxiliary (custom) reports
where the full contents are not being duplicated.
"""
}

keyspec _OP_TCP_SOCKET_INFO {
    kind:             RunTimeHost
    type:             list[list[string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Local TCP socket info during run-time exec op"
    doc: """
On Linux machines, will return information about existing TCP sockets,
to the degree that the chalk process has permissions to access this
information.

One socket is returned per row. The columns returned are:
1. The local IP address in use
2. The local port number in use
3. The remote IP address in use
4. The remote port number in use
5. The status of the connection (e.g., LISTEN, CONNECT, ...)
6. The UID of the process that owns the socket
7. The inode associated with the socket

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_UDP_SOCKET_INFO {
    kind:             RunTimeHost
    type:             list[list[string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Local UDP socket info during run-time exec op"
    doc: """
On Linux machines, will return UDP state information, to the degree
that the chalk process has permissions to access this information.

One socket is returned per row. The columns returned are:
1. The local IP address in use
2. The local port number in use
3. The remote IP address in use
4. The remote port number in use
5. The status of the connection (always UNCONN)
6. The UID of the process that owns the socket
7. The inode associated with the socket

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_IPV4_ROUTES {
    kind:             RunTimeHost
    type:             list[list[string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Local IPV4 routes during run-time exec op"
    doc: """
On Linux machines, will return IPV4 routing table information, to the
degree that the chalk process has permissions to access this
information.

One route is returned per row. The columns returned are:
1. The destination network
2. The next hop (gateway address)
3. The netmask for the route
4. The interface (device) associated with the route
5. The kernel's 'Flags' field
6. The kernel's 'RefCnt' field
7. The kernel's 'Use' field
8. The kernel's 'Metric' field
9. The kernel's 'MTU' field
10. The kernel's 'Window' field
11. The kernel's 'IRTT' field

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_IPV6_ROUTES {
    kind:             RunTimeHost
    type:             list[list[string]]
    standard:         true
    shortdoc: "Local IPV6 routes during run-time exec op"
    since:            "0.1.0"
    doc: """
On Linux machines, will return IPV6 routing table information, to the
degree that the chalk process has permissions to access this
information.

One route is returned per row.  The columns returned are:
1. The destination network
2. The destination prefix length in hex
3. The source network
4. The source prefix length in hex
5. The next hop (gateway address)
6. The interface (device) associated with the route
7. The kernel's 'Flags' field
8. The kernel's 'RefCnt' field
9. The kernel's 'Use' field
10. The kernel's 'Metric' field

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_IPV4_INTERFACES {
    kind:             RunTimeHost
    type:             list[list[string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Local IPV4 interfaces during run-time exec op"
    doc: """
On Linux machines, will return information on IPV4 interface status.

One interface is listed per row.  The first column is the interface
name.

The next 8 columns are receive statistics:
bytes, packets, errors, drops, fifo, frame, compressed, multicast

The remaining columns are transmission statistics:
bytes, packets, errors, drops, fifo, colls, carrier, compressed

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_IPV6_INTERFACES {
    kind:             RunTimeHost
    type:             list[list[string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Local IPV6 interfaces routes during run-time exec op"
    doc: """
On Linux machines, will return information on IPV6 interface status.

One interface is listed per row.  The first column is the interface name.

The remaining columns are:

- The netlink device number in hex
- The prefix length in hex
- The kernel's 'Scope value' (see include/net/ipv6.h)
- The kernel's 'Interface flags' (see include/linux/rtnetlink.h')

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_ARP_TABLE {
    kind:             RunTimeHost
    type:             list[list[string]]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Local ARP table during run-time exec op"
    doc: """
On Linux machines, will return the ARP table.

One row is returned for each ARP entry.  The columns are:
1. The IP address
2. The kernel's recorded hardware type
3. Any flags set in the kernel for the ARP entry
4. The associated hardware address.
5. The kernel's record 'Mask' field
6. The network device from which the entry broadcasts.

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_CPU_INFO {
    kind:             RunTimeHost
    type:             dict[string, string]
    standard:         true
    since:            "0.1.0"
    shortdoc: "Load info during exec op; to be expanded."
    doc: """
Currently, this just returns CPU basic load average info, including
number of processes.

The values are all presented as strings.  The current available item info is:

- load: load averages over the last 1, 5 and 15 mins
- lastpid: the last PID handed out by the system
- runnable_procs: the number of current running processes
- total_procs: the total number of running processes.

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_ALL_PS_INFO {
    kind:             RunTimeHost
    type:             dict[string, dict[string, string]]
    standard:         true
    since:            "0.1.0"
    shortdoc:         "Visible host process info found during exec op"
    doc: """
For every process visible to Chalk, reports key process info.  The
keys are the PID as a string, even when they are clearly numeric
values.

The values are dictionaries of information associated with that process:

- state: The state of the process (e.g, Running, Sleeping, Zombie, ...)
- ppid: The parent process ID
- pgrp: The process group
- sid:  The session ID of the process.
- tty_nr: The encoded TTY number for the controlling terminal of the process.
- tpgid: The ID of the terminal's process group.
- user_time: The amount of time the process has spent in user mode since
  starting, in seconds.
- system_time: The amount of time the process has spent in kernel mode since
  starting, in seconds.
- child_utime: User mode time of the proc's waited-for children.
- child_stime: Kernel mode time of the proc's waited-for children.
- priority: The real-time scheduler's priority field reported by Linux.
- nice: The nice value for the process (higher numbers are lower priority)
- num_threads: The number of threads in the process.
- runtime: The time since the process started, in seconds.
- uid: A list containing the real, effective, saved and fs UID
- gid: A list containing the real, effective, saved and fs GID
- fd_size: The number of allocated file descriptors
- groups: A list of the supplementary groups to which the process belongs.
- seccomp: The process' Seccomp status ('disabled', 'strict' or 'filter')
- umask: The umask associated with the process.
- argv: The command line used when exec'ing the process.
- path: The path to the executable.
- cwd: The cwd of the process.
- name: The short name of the process, as determined by /proc/pid/stat
- command: The short name of the command, as determined by proc/pid/comm

When running Chalk inside a container, this information will be the
virtualized view available insider the container.
"""
}

keyspec _OP_CLOUD_PROVIDER {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.3"
    doc: """
In case of chalk running in the cloud, the type of the cloud provider the
node is running in. Currently the only supported values are gcp, aws, azure
"""
}

keyspec _OP_CLOUD_PROVIDER_ACCOUNT_INFO {
    kind:             RunTimeHost
    type:             `x
    standard:         true
    since:            "0.1.3"
    doc: """
In case of chalk running in the cloud, the account ID or other identifying metadata
for the account owning the environment in which chalk executes in.

 - For AWS this is the AWS Account ID
 - For Azure this is the Subscription ID
 - For GCP its the Service Account
"""
}

keyspec _OP_CLOUD_PROVIDER_REGION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.3"
    doc: """
In case of chalk running in the cloud, the region in which chalk executes in
"""
}

keyspec _OP_CLOUD_PROVIDER_IP {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.3"
    doc: """
In case of chalk running in the cloud, the public IPv4 of the host in which chalk
executes in
"""
}

keyspec _OP_CLOUD_PROVIDER_INSTANCE_TYPE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.3"
    doc: """
In case of chalk running in the cloud, the instance type where chalk
executes in (e.g., t2.medium for AWS)
"""
}

keyspec _OP_CLOUD_PROVIDER_TAGS {
    kind:             RunTimeHost
    type:             `x
    standard:         true
    since:            "0.1.3"
    doc: """
In case of chalk running in the cloud, tags associated with the instance
"""
}

keyspec _OP_CLOUD_PROVIDER_SERVICE_TYPE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.3"
    doc: """
In case of chalk running in the cloud, the type of the service the node is
running in, (eks, ecs for AWS etc.)

This functionality is currently experimental, and only EKS, EC2, ECS are inferred
for AWS.
"""
}

keyspec _AZURE_INSTANCE_METADATA {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.3"
    doc: """
JSON containing cloud instance attributes, such as instance-id, IP
addresses, etc.

See https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service for more
"""
}

keyspec _GCP_INSTANCE_METADATA {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.3"
    doc: """
JSON containing cloud instance attributes, such as instance-id, IP
addresses, etc.

See https://cloud.google.com/compute/docs/metadata/overview for more
"""
}

keyspec _GCP_PROJECT_METADATA {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.4.2"
    doc: """
JSON containing project attributes, such as the project id and numeric id

See https://cloud.google.com/compute/docs/metadata/overview for more.
"""
}

keyspec _AWS_INSTANCE_IDENTITY_DOCUMENT {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.1"
    doc: """
JSON containing instance attributes, such as instance-id, private IP
address, etc. See Instance identity documents.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_INSTANCE_IDENTITY_PKCS7 {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
Used to verify the document's authenticity and content against the
signature. See Instance identity documents.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_INSTANCE_IDENTITY_SIGNATURE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
Data that can be used by other parties to verify identity document's
origin and authenticity.  See Instance identity documents.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_INSTANCE_MONITORING {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
Value showing whether the customer has enabled detailed one-minute
monitoring in CloudWatch. Valid values: `enabled`, `disabled`.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_AMI_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The AMI ID used to launch the instance.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_AMI_LAUNCH_INDEX {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
If you started more than one instance at the same time, this value
indicates the order in which the instance was launched. The value of
the first instance launched is 0.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_AMI_MANIFEST_PATH {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The path to the AMI manifest file in Amazon S3. If you used an Amazon
EBS-backed AMI to launch the instance, the returned result is unknown.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_ANCESTOR_AMI_IDS {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The AMI IDs of any instances that were rebundled to create this
AMI. This value will only exist if the AMI manifest file contained an
ancestor-amis key.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}


keyspec _AWS_HOSTNAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
If the EC2 instance is using IP-based naming (IPBN), this is the
private IPv4 DNS hostname of the instance. If the EC2 instance is
using Resource-based naming (RBN), this is the RBN. In cases where
multiple network interfaces are present, this refers to the eth0
device (the device for which the device number is 0). For more
information about IPBN and RBN, see Amazon EC2 instance hostname
types.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_IAM_INFO {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.1"
    doc: """
If there is an IAM role associated with the instance, contains
information about the last time the instance profile was updated,
including the instance's LastUpdated date, InstanceProfileArn, and
InstanceProfileId. Otherwise, not present.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}


keyspec _AWS_INSTANCE_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The ID of an AWS instance.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_INSTANCE_LIFE_CYCLE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The purchasing option of this instance. For more information see:

<ul><li>https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-purchasing-options.html</li></ul>

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_INSTANCE_TYPE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The type of instance. For more information, see:

<ul><li>https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html</li></ul>

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_IPV6_ADDR {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The IPv6 address of the instance, if any. In cases where multiple
network interfaces are present, this refers to the eth0 device network
interface and the first IPv6 address assigned.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_KERNEL_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The ID of the kernel launched with this instance, if applicable.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_LOCAL_HOSTNAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
In cases where multiple network interfaces are present, this refers to
the eth0 device (the device for which the device number is 0). If the
EC2 instance is using IP-based naming (IPBN), this is the private IPv4
DNS hostname of the instance. If the EC2 instance is using
Resource-based naming (RBN), this is the RBN. For more information
about IPBN, RBN, and EC2 instance naming, see:

<ul><li>https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html</li></ul>

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_LOCAL_IPV4_ADDR {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The private IPv4 address of the instance, if any. In cases where
multiple network interfaces are present, this refers to the eth0
device (the device for which the device number is 0).

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_AZ {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The Availability Zone in which the instance launched.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_AZ_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The static Availability Zone ID in which the instance is launched. The
Availability Zone ID is consistent across accounts. However, it might
be different from the Availability Zone, which can vary by account.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_PLACEMENT_GROUP {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The name of the placement group in which the instance is launched.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_DEDICATED_HOST_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The ID of the host on which the instance is launched. Applicable only
to Dedicated Hosts.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_PARTITION_NUMBER {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The number of the partition in which the instance is launched.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_REGION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The AWS Region in which the instance is launched.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_PUBLIC_HOSTNAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The instance's public DNS (IPv4). This category is only returned if
the enableDnsHostnames attribute is set to true. For more information,
see [DNS attributes for your
VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html) in
the Amazon VPC User Guide. If the instance only has a public-IPv6
address and no public-IPv4 address, this item is not set.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_PUBLIC_IPV4_ADDR {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The public IPv4 address. If an Elastic IP address is associated with
the instance, the value returned is the Elastic IP address.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_OPENSSH_PUBKEY {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
Public key for SSH access. Only available if supplied at instance
launch time.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_SECURITY_GROUPS {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    since:            "0.1.1"
    doc: """
The names of the security groups applied to the instance.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_SECURITY_GROUP_IDS {
    kind:             RunTimeHost
    type:             list[string]
    standard:         true
    since:            "0.1.2"
    doc: """
The IDs of the security groups to which the network interface belongs.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_RESOURCE_DOMAIN {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The domain for AWS resources for the Region.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_PARTITION_NAME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.1"
    doc: """
The partition that the resource is in. For standard AWS Regions, the
partition is aws. If you have resources in other partitions, the
partition is aws-partitionname. For example, the partition for
resources in the China (Beijing) Region is aws-cn.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_TAGS {
    kind:             RunTimeHost
    type:             dict[string, string]
    standard:         true
    since:            "0.1.1"
    doc: """
The instance tags associated with the instance. Only available if you
explicitly allow access to tags in instance metadata. For more
information, see [Allow access to tags in instance
metadata](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#allow-access-to-tags-in-IMDS).

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_AUTOSCALING_TARGET_LIFECYCLE_STATE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
Value showing the target Auto Scaling lifecycle state that an Auto
Scaling instance is transitioning to. Present when the instance
transitions to one of the target lifecycle states after March 10,
2022. Possible
values: Detached | InService | Standby | Terminated | Warmed:Hibernated | Warmed:Running | Warmed:Stopped | Warmed:Terminated. See Retrieve
the target lifecycle state through instance metadata in the Amazon EC2
Auto Scaling User Guide.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_BLOCK_DEVICE_MAPPING_AMI {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The virtual device that contains the root/boot file system.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_BLOCK_DEVICE_MAPPING_ROOT {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The virtual devices or partitions associated with the root devices or
partitions on the virtual device, where the root (/ or C:) file system
is associated with the given instance.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_BLOCK_DEVICE_MAPPING_SWAP {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The virtual devices associated with swap. Not always present.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_EVENTS_MAINTENANCE_HISTORY {
    kind:             RunTimeHost
    type:             `x
    standard:         true
    since:            "0.1.2"
    doc: """
If there are completed or canceled maintenance events for the
instance, contains a JSON string with information about the
events. For more information, see To view event history about
completed or canceled events.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_EVENTS_MAINTENANCE_SCHEDULED {
    kind:             RunTimeHost
    type:             `x
    standard:         true
    since:            "0.1.2"
    doc: """
If there are active maintenance events for the instance, contains a
JSON string with information about the events. For more information,
see View scheduled events.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_EVENTS_RECOMMENDATIONS_REBALANCE {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The approximate time, in UTC, when the EC2 instance rebalance
recommendation notification is emitted for the instance. The following
is an example of the metadata for this category: {"noticeTime":
"2020-11-05T08:22:00Z"}. This category is available only after the
notification is emitted. For more information, see EC2 instance
rebalance recommendations.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_IDENTITY_CREDENTIALS_EC2_INFO {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.2"
    doc: """
Information about the credentials
in identity-credentials/ec2/security-credentials/ec2-instance.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_IDENTITY_CREDENTIALS_EC2_SECURITY_CREDENTIALS_EC2_INSTANCE {
    kind:             RunTimeHost
    type:             dict[string, `x]
    standard:         true
    since:            "0.1.2"
    doc: """
Credentials for the instance identity role that allow on-instance
software to identify itself to AWS to support features such as EC2
Instance Connect and AWS Systems Manager Default Host Management
Configuration. These credentials have no policies attached, so they
have no additional AWS API permissions beyond identifying the instance
to the AWS feature.  This option will not log the SecretAccessKey and
Token.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_INSTANCE_ACTION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
Notifies the instance that it should reboot in preparation for
bundling. Valid values: none | shutdown | bundle-pending.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_MAC {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The instance's media access control (MAC) address. In cases where
multiple network interfaces are present, this refers to the eth0
device (the device for which the device number is 0).

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_INTERFACE_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The ID of the network interface.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_SUBNET_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The ID of the subnet in which the interface resides.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_VPC_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The ID of the VPC in which the interface resides.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_METRICS_VHOSTMD {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
No longer available.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_PRODUCT_CODES {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
AWS Marketplace product codes associated with the instance, if any.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_RAMDISK_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The ID of the RAM disk specified at launch time, if applicable.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_RESERVATION_ID {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The ID of the reservation.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_SPOT_INSTANCE_ACTION {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The action (hibernate, stop, or terminate) and the approximate time,
in UTC, when the action will occur. This item is present only if the
Spot Instance has been marked for hibernate, stop, or terminate. For
more information, see instance-action.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}

keyspec _AWS_SPOT_TERMINATION_TIME {
    kind:             RunTimeHost
    type:             string
    standard:         true
    since:            "0.1.2"
    doc: """
The approximate time, in UTC, that the operating system for your Spot
Instance will receive the shutdown signal. This item is present and
contains a time value (for example, 2015-01-05T18:02:00Z) only if the
Spot Instance has been marked for termination by Amazon EC2. The
termination-time item is not set to a time if you terminated the Spot
Instance yourself. For more information, see termination-time.

This key is only available as a run-time key, and only when running in
AWS where imdsv2 is available.
"""
}


keyspec _CHALK_EXTERNAL_ACTION_AUDIT {
    kind: RunTimeHost
    type: list[(string, string)]
    standard: true
    since: "0.1.1"
    doc:   """
An audit trail of any actions taken by the config file that involved
the world beyond the chalk process. For instance, any file
modifications and web connections get audited, as do externally run
commands.
"""
}

keyspec _CHALK_RUN_TIME {
    kind: RunTimeHost
    type: int
    standard: true
    since: "0.1.1"
    doc: """
Calculates the amount of time between the start of a chalk executable
and when a report is generated. It's an integer with resolution of
1/1000000th of a second.
"""

}

keyspec $CHALK_CONFIG {
    required_in_self_mark: true
    kind:                  ChalkTimeArtifact
    type:                  string
    standard:              true
    system:                true
    since:                 "0.1.0"
    shortdoc:         "Configuration embedded in chalk exe"
    doc:              """
This key is only used with chalk executables. It holds the embedded
configuration for that instance of the chalk command.

Chalk executables can only have their configuration changed via the
`chalk config` command, or `chalk setup`.
"""
}

keyspec $CHALK_IMPLEMENTATION_NAME {
    required_in_self_mark: true
    kind:                  ChalkTimeArtifact
    type:                  string
    standard:              true
    system:                true
    since:                 "0.1.0"
    doc:                   """
Added to chalk binaries to indicate the implementation of Chalk in use.
"""
}

keyspec $CHALK_LOAD_COUNT {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   string
   standard:               true
   system:                 true
   since:                  "0.1.0"
   doc:                    """
Count how many times the self-mark has been rewritten.
"""
}

keyspec $CHALK_PUBLIC_KEY {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   string
   standard:               true
   system:                 true
   since:                  "0.1.0"
   doc:                    """
Used for attestations.
"""
}

keyspec $CHALK_ENCRYPTED_PRIVATE_KEY {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   string
   standard:               true
   system:                 true
   since:                  "0.1.0"
   doc:                    """
Also necessary for attestations.
"""
}

keyspec $CHALK_DATA_API_KEY {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   string
   standard:               true
   system:                 true
   since:                  "0.3.0"
   doc:                    """
API key used to optionally save/load attestation keys to cloud.
"""
}

keyspec $CHALK_API_REFRESH_TOKEN {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   string
   standard:               true
   system:                 true
   since:                  "0.1.4"
   doc:                    """
Key to hold the OIDC refresh token for non-user present API
re-authentication.
"""
}

keyspec $CHALK_ATTESTATION_TOKEN {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   string
   standard:               true
   system:                 true
   since:                  "0.1.0"
   doc:                    """
...
"""
}

keyspec $CHALK_SECRET_ENDPOINT_URI {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   string
   standard:               true
   system:                 true
   since:                  "0.1.0"
   doc:                    """
...
"""
}

keyspec $CHALK_SAVED_COMPONENT_PARAMETERS {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact

   # Note that I'm not sure the 'proper' type would work yet (in fact,
   # I am somewhat sure it will not). I haven't had time to test it;
   # ideally the fact that `x is in a typespec parameter would mean it
   # re-binds for every typecheck against the list, but I don't think
   # this is actually the case yet.
   #
   # At the very least, as long as con4m never operates on the values,
   # it will happily accept `x.
   #
   # type:                   list[tuple[bool, string, string, typespec[`x], `x]]

   type:                   `x
   standard:               true
   system:                 true
   since:                  "0.1.2"
   doc:                    """
This is where we save configuration parameters for components that
have been imported.

The items in the list consist of five-tuples:

1) A boolean indicating whether it's an attribute parameter (false
   means it's a variable parameter)
2) The base URL reference for the component
3) The name of the variable or attribute.
4) The Con4m type of the parameter.
5) The stored value (which will be of the type provided)
"""

}

keyspec $CHALK_COMPONENT_CACHE {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   dict[string, string]
   standard:               true
   system:                 true
   since:                  "0.1.2"
   doc: """
This consists of URLs (minus the file extension) mapped to source code
for components.
"""

}

keyspec $CHALK_MEMOIZE {
   required_in_self_mark:  true
   kind:                   ChalkTimeArtifact
   type:                   dict[string, string]
   standard:               true
   system:                 true
   since:                  "0.3.4"
   doc: """
Dictionary of `memoize()` function results.
"""
}
