# Copyright (c) 2023, Crash Override, Inc.
#
# This file is part of Chalk
# (see https://crashoverride.com/docs/chalk)
import shutil
from pathlib import Path
from typing import Optional

import pytest

from .chalk.runner import Chalk
from .conf import MAGIC, PYS, SHEBANG
from .utils.log import get_logger


logger = get_logger()


@pytest.mark.parametrize(
    "test_file, shebang",
    [
        ("sample_1", "helloworld.py"),
        ("sample_2", "main.py"),
        ("sample_3", None),
        ("sample_4", None),
    ],
)
def test_virtual_valid(
    tmp_data_dir: Path, chalk: Chalk, test_file: str, shebang: Optional[str]
):
    shutil.copytree(PYS / test_file, tmp_data_dir, dirs_exist_ok=True)

    # chalk reports generated by insertion, json array that has one element
    insert = chalk.insert(
        artifact=tmp_data_dir,
        virtual=True,
        expecting_chalkmarks=bool(shebang),
    )
    if shebang:
        assert insert.marks_by_path.contains({str(tmp_data_dir / shebang): {}})

    # array of json chalk objects as output, of which we are only expecting one
    assert chalk.extract(artifact=tmp_data_dir, virtual=True)


@pytest.mark.parametrize(
    "test_file, shebang",
    [
        ("sample_1", "helloworld.py"),
        ("sample_2", "main.py"),
        ("sample_3", None),
        ("sample_4", None),
    ],
)
def test_nonvirtual_valid(
    tmp_data_dir: Path, chalk: Chalk, test_file: str, shebang: Optional[str]
):
    shutil.copytree(PYS / test_file, tmp_data_dir, dirs_exist_ok=True)

    # chalk reports generated by insertion, json array that has one element
    insert = chalk.insert(
        artifact=tmp_data_dir,
        virtual=False,
        expecting_chalkmarks=bool(shebang),
    )
    if shebang:
        assert insert.marks_by_path.contains({str(tmp_data_dir / shebang): {}})

    # array of json chalk objects as output, of which we are only expecting one
    extract = chalk.extract(
        artifact=tmp_data_dir,
        virtual=False,
        expecting_chalkmarks=bool(shebang),
    )
    if shebang:
        assert extract.marks_by_path.contains({str(tmp_data_dir / shebang): {}})

    # check that first line shebangs are not clobbered in non-virtual chalk
    for file in tmp_data_dir.iterdir():
        if file.suffix in {"key", "pub"}:
            continue

        is_artifact = file.name == shebang
        text = file.read_text()
        lines = text.splitlines()
        first_line = next(iter(lines), "")

        # shebang only should be present in artifacts
        assert first_line.startswith(SHEBANG) == is_artifact

        if is_artifact:
            # chalk mark with MAGIC expected in last line
            assert lines[-1].startswith("#")
            assert MAGIC in lines[-1]
        else:
            assert MAGIC not in text
