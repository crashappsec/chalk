# Copyright (c) 2023, Crash Override, Inc.
#
# This file is part of Chalk
# (see https://crashoverride.com/docs/chalk)
from pathlib import Path

import pytest

from .chalk.runner import Chalk
from .conf import ZIPS
from .utils.log import get_logger


logger = get_logger()


@pytest.mark.slow()
@pytest.mark.parametrize(
    "copy_files",
    [
        [ZIPS / "nodejs" / "function.zip"],
        [ZIPS / "python" / "my_deployment_package.zip"],
    ],
    indirect=True,
)
@pytest.mark.parametrize("virtual", [True, False])
def test_valid_slow(
    tmp_data_dir: Path,
    chalk: Chalk,
    copy_files: list[Path],
    virtual: bool,
):
    test_file = copy_files[0]

    # chalk reports generated by insertion, json array that has one element
    insert = chalk.insert(artifact=tmp_data_dir, virtual=virtual)
    assert insert.report.marks_by_path.contains({str(test_file): {}})

    # array of json chalk objects as output, of which we are only expecting one
    extract = chalk.extract(artifact=tmp_data_dir, virtual=virtual)
    if not virtual:
        assert extract.report.marks_by_path.contains({str(test_file): {}})


@pytest.mark.parametrize(
    "copy_files",
    [
        # empty zip file does not get chalked, so no artifact info
        [ZIPS / "empty" / "empty.zip"],
    ],
    indirect=True,
)
@pytest.mark.parametrize("virtual", [True, False])
def test_empty(
    tmp_data_dir: Path,
    copy_files: list[Path],
    chalk: Chalk,
    virtual: bool,
):
    # no _CHALK will be generated on an unchalked empty zip
    assert chalk.insert(
        artifact=tmp_data_dir,
        virtual=virtual,
        expecting_chalkmarks=False,
    )
    assert chalk.extract(
        artifact=tmp_data_dir,
        virtual=virtual,
        expecting_chalkmarks=False,
    )


@pytest.mark.parametrize(
    "copy_files",
    [
        [ZIPS / "misc" / "misc.zip"],
        [ZIPS / "golang" / "myFunction.zip"],
    ],
    indirect=True,
)
@pytest.mark.parametrize("virtual", [True, False])
def test_valid(
    tmp_data_dir: Path,
    chalk: Chalk,
    copy_files: list[Path],
    virtual: bool,
):
    test_file = copy_files[0]

    # chalk reports generated by insertion, json array that has one element
    insert = chalk.insert(artifact=tmp_data_dir, virtual=virtual)
    # we are only checking the ZIP chalk mark, not any of the subchalks
    assert insert.report.marks_by_path.contains({str(test_file): {}})

    # array of json chalk objects as output, of which we are only expecting one
    extract = chalk.extract(artifact=tmp_data_dir, virtual=virtual)
    if not virtual:
        assert extract.report.marks_by_path.contains({str(test_file): {}})
